// This file is auto-generated by @hey-api/openapi-ts

export type ChangePasswordRequest = {
    /**
     * Origin Password
     */
    old_password: string;
    /**
     * New Password
     */
    new_password: string;
};

export type CreateProjectRequest = {
    /**
     * Title
     */
    title: string;
};

export type CreateProjectResponse = {
    /**
     * ID
     */
    id: number;
};

export type CreateUserRequest = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
    /**
     * Username
     */
    username: string;
};

export type CreateUserResponse = {
    /**
     * Token
     */
    token: string;
};

export type CreateWorkspaceRequest = {
    /**
     * Title
     */
    title: string;
};

export type CreateWorkspaceResponse = {
    /**
     * ID
     */
    id: number;
};

export type EmailVerificationRequest = {
    /**
     * Email
     */
    email: string;
};

export type EmailVerificationType = 'signup' | 'reset_password';

export type ExperimentAttendanceStatus = 'scheduled' | 'not_attended' | 'attended';

export type ExperimentTimeslotRead = {
    /**
     * ID
     */
    id: number;
    /**
     * Experiment start time
     */
    start_time: string;
    /**
     * Experiment end time
     */
    end_time: string;
    /**
     * Maximum number of exparticipants per session
     */
    max_participants: number;
};

export type ExperimentTimeslotRequest = {
    /**
     * ID
     */
    id?: number | null;
    /**
     * Experiment start time
     */
    start_time: string;
    /**
     * Experiment end time
     */
    end_time: string;
    /**
     * Maximum number of exparticipants per session
     */
    max_participants: number;
};

export type ExperimentTypeEnum = 'online' | 'offline';

export type GetExperimentParticipantResponse = {
    /**
     * Participant ID
     */
    id: number;
    /**
     * Username
     */
    username: string;
    /**
     * Reserved Date
     */
    reserved_date: string;
    /**
     * Attendance Status
     */
    attendance_status: ExperimentAttendanceStatus;
    /**
     * Created datetime
     */
    created_at: string;
    /**
     * Updated datetime
     */
    updated_at: string;
};

export type GetExperimentProjectResponse = {
    /**
     * ID
     */
    id: number;
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Whether the project is public
     */
    is_public: boolean;
    /**
     * Experiment start date
     */
    start_date: string | null;
    /**
     * Experiment end date
     */
    end_date: string | null;
    /**
     * Experimental exclusion days
     */
    excluded_dates: Array<(string)>;
    /**
     * Time information of experiment
     */
    experiment_timeslots: Array<ExperimentTimeslotRead>;
    /**
     * Maximum number of experiment participants
     */
    max_participants: number;
    experiment_type: ExperimentTypeEnum;
    /**
     * Experiment location
     */
    location: string | null;
    /**
     * Experiment participant code
     */
    participant_code: string;
    /**
     * Created datetime
     */
    created_at: string;
    /**
     * Updated datetime
     */
    updated_at: string;
};

export type GetProjectListResponse = {
    /**
     * ID
     */
    id: number;
    /**
     * Workspace ID
     */
    workspace_id: number;
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Whether the project is public
     */
    is_public: boolean;
    /**
     * Number of experiment participants
     */
    joined_participants: number;
    /**
     * Maximum number of exparticipants per session
     */
    max_participants: number;
    created_at: string;
    updated_at: string;
};

export type GetUserListResponse = {
    /**
     * ID
     */
    id: number;
    /**
     * Email
     */
    email: string;
    /**
     * username
     */
    username: string;
};

export type GetWorkspaceListResponse = {
    /**
     * ID
     */
    id: number;
    /**
     * Title
     */
    title: string;
    /**
     * Order
     */
    order_no: number;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type LoginRequest = {
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
};

export type LoginResponse = {
    /**
     * Token
     */
    token: string;
    /**
     * Refresh token
     */
    refresh_token: string;
};

export type ProjectTypeEnum = 'survey' | 'experiment';

export type PutProjectRequest = {
    /**
     * Title
     */
    title: string;
    /**
     * Description
     */
    description: string;
    /**
     * Whether the project is public
     */
    is_public: boolean;
    start_date: string;
    /**
     * Experiment end date
     */
    end_date: string;
    /**
     * Experimental exclusion days
     */
    excluded_dates: Array<(string)>;
    /**
     * Time information of experiment
     */
    experiment_timeslots: Array<ExperimentTimeslotRequest>;
    /**
     * Maximum number of experiment participants
     */
    max_participants: number;
    experiment_type: ExperimentTypeEnum;
    /**
     * Experiment location
     */
    location?: string | null;
};

export type RefreshTokenRequest = {
    /**
     * Token
     */
    token: string;
    /**
     * Refresh token
     */
    refresh_token: string;
};

export type RefreshTokenResponse = {
    /**
     * Token
     */
    token: string;
    /**
     * Refresh token
     */
    refresh_token: string;
};

export type UpdateUserRequest = {
    /**
     * User username
     */
    username?: string | null;
    /**
     * Phone Number
     */
    phone_num?: string | null;
};

export type UpdateWorkspaceRequest = {
    /**
     * Title
     */
    title?: string | null;
    /**
     * New order no
     */
    order_no?: number | null;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type VerifyEmailRequest = {
    /**
     * Email
     */
    email: string;
    /**
     * Code
     */
    code: string;
};

export type RefreshTokenAuthRefreshPostData = {
    requestBody: RefreshTokenRequest;
};

export type RefreshTokenAuthRefreshPostResponse = RefreshTokenResponse;

export type CheckEmailAvailabilityAuthEmailAvailabilityPostData = {
    requestBody: EmailVerificationRequest;
};

export type CheckEmailAvailabilityAuthEmailAvailabilityPostResponse = unknown;

export type SendVerificationEmailAuthEmailVerificationsPostData = {
    requestBody: EmailVerificationRequest;
    verificationType: EmailVerificationType;
};

export type SendVerificationEmailAuthEmailVerificationsPostResponse = unknown;

export type ValidateVerificationEmailAuthEmailVerificationsValidationPostData = {
    requestBody: VerifyEmailRequest;
    verificationType: EmailVerificationType;
};

export type ValidateVerificationEmailAuthEmailVerificationsValidationPostResponse = unknown;

export type GetUserListUsersGetData = {
    page?: number;
    size?: number;
};

export type GetUserListUsersGetResponse = Array<GetUserListResponse>;

export type CreateUserUsersPostData = {
    requestBody: CreateUserRequest;
};

export type CreateUserUsersPostResponse = CreateUserResponse;

export type UpdateUserUsersPatchData = {
    requestBody: UpdateUserRequest;
};

export type UpdateUserUsersPatchResponse = unknown;

export type GetUserMeUsersMeGetResponse = GetUserListResponse;

export type DeleteUserUsersMeDeleteResponse = void;

export type LoginUsersLoginPostData = {
    requestBody: LoginRequest;
};

export type LoginUsersLoginPostResponse = LoginResponse;

export type ChangePasswordUsersPasswordPatchData = {
    requestBody: ChangePasswordRequest;
};

export type ChangePasswordUsersPasswordPatchResponse = void;

export type GetWorkspaceListWorkspacesGetResponse = Array<GetWorkspaceListResponse>;

export type CreateWorkspaceWorkspacesPostData = {
    requestBody: CreateWorkspaceRequest;
};

export type CreateWorkspaceWorkspacesPostResponse = CreateWorkspaceResponse;

export type UpdateWorkspaceWorkspacesWorkspaceIdPatchData = {
    requestBody: UpdateWorkspaceRequest;
    workspaceId: number;
};

export type UpdateWorkspaceWorkspacesWorkspaceIdPatchResponse = unknown;

export type DeleteWorkspaceWorkspacesWorkspaceIdDeleteData = {
    workspaceId: number;
};

export type DeleteWorkspaceWorkspacesWorkspaceIdDeleteResponse = unknown;

export type GetProjectListWorkspacesWorkspaceIdProjectsGetData = {
    page?: number;
    projectType: ProjectTypeEnum;
    size?: number;
    workspaceId: number;
};

export type GetProjectListWorkspacesWorkspaceIdProjectsGetResponse = Array<GetProjectListResponse>;

export type CreateProjectWorkspacesWorkspaceIdProjectsPostData = {
    projectType: ProjectTypeEnum;
    requestBody: CreateProjectRequest;
    workspaceId: number;
};

export type CreateProjectWorkspacesWorkspaceIdProjectsPostResponse = CreateProjectResponse;

export type GetProjectProjectsProjectIdGetData = {
    projectId: number;
    projectType: ProjectTypeEnum;
};

export type GetProjectProjectsProjectIdGetResponse = GetExperimentProjectResponse;

export type UpdateProjectProjectsProjectIdPutData = {
    projectId: number;
    projectType: ProjectTypeEnum;
    requestBody: PutProjectRequest;
};

export type UpdateProjectProjectsProjectIdPutResponse = unknown;

export type DeleteProjectProjectsProjectIdDeleteData = {
    projectId: number;
    projectType: ProjectTypeEnum;
};

export type DeleteProjectProjectsProjectIdDeleteResponse = unknown;

export type GetProjectParticipantListProjectsProjectIdParticipantsGetData = {
    page?: number;
    projectId: number;
    projectType: ProjectTypeEnum;
    size?: number;
};

export type GetProjectParticipantListProjectsProjectIdParticipantsGetResponse = Array<GetExperimentParticipantResponse>;

export type DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteData = {
    participantId: number;
    projectId: number;
    projectType: ProjectTypeEnum;
};

export type DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteResponse = unknown;

export type $OpenApiTs = {
    '/auth/refresh': {
        post: {
            req: RefreshTokenAuthRefreshPostData;
            res: {
                /**
                 * Successful Response
                 */
                201: RefreshTokenResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/auth/email-availability': {
        post: {
            req: CheckEmailAvailabilityAuthEmailAvailabilityPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/auth/email-verifications': {
        post: {
            req: SendVerificationEmailAuthEmailVerificationsPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/auth/email-verifications/validation': {
        post: {
            req: ValidateVerificationEmailAuthEmailVerificationsValidationPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/users': {
        get: {
            req: GetUserListUsersGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<GetUserListResponse>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        post: {
            req: CreateUserUsersPostData;
            res: {
                /**
                 * Successful Response
                 */
                201: CreateUserResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: UpdateUserUsersPatchData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/users/me': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: GetUserListResponse;
            };
        };
        delete: {
            res: {
                /**
                 * Successful Response
                 */
                204: void;
            };
        };
    };
    '/users/login': {
        post: {
            req: LoginUsersLoginPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: LoginResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/users/password': {
        patch: {
            req: ChangePasswordUsersPasswordPatchData;
            res: {
                /**
                 * Successful Response
                 */
                204: void;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/workspaces': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: Array<GetWorkspaceListResponse>;
            };
        };
        post: {
            req: CreateWorkspaceWorkspacesPostData;
            res: {
                /**
                 * Successful Response
                 */
                201: CreateWorkspaceResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/workspaces/{workspace_id}': {
        patch: {
            req: UpdateWorkspaceWorkspacesWorkspaceIdPatchData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteWorkspaceWorkspacesWorkspaceIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/workspaces/{workspace_id}/projects': {
        get: {
            req: GetProjectListWorkspacesWorkspaceIdProjectsGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<GetProjectListResponse>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        post: {
            req: CreateProjectWorkspacesWorkspaceIdProjectsPostData;
            res: {
                /**
                 * Successful Response
                 */
                201: CreateProjectResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/projects/{project_id}': {
        get: {
            req: GetProjectProjectsProjectIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: GetExperimentProjectResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        put: {
            req: UpdateProjectProjectsProjectIdPutData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteProjectProjectsProjectIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/projects/{project_id}/participants': {
        get: {
            req: GetProjectParticipantListProjectsProjectIdParticipantsGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<GetExperimentParticipantResponse>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/projects/{project_id}/participants/{participant_id}': {
        delete: {
            req: DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
};