// This file is auto-generated by @hey-api/openapi-ts

export type ChangePasswordRequest = {
  /**
   * Origin Password
   */
  oldPassword: string;
  /**
   * New Password
   */
  newPassword: string;
};

export type CreateProjectRequest = {
  /**
   * Title
   */
  title: string;
};

export type CreateProjectResponse = {
  /**
   * ID
   */
  id: number;
};

export type CreateUserRequest = {
  /**
   * Email
   */
  email: string;
  /**
   * Password
   */
  password: string;
  /**
   * Username
   */
  username: string;
};

export type CreateUserResponse = {
  /**
   * Token
   */
  token: string;
};

export type CreateWorkspaceRequest = {
  /**
   * Title
   */
  title: string;
};

export type CreateWorkspaceResponse = {
  /**
   * ID
   */
  id: number;
};

export type EmailVerificationRequest = {
  /**
   * Email
   */
  email: string;
};

export type EmailVerificationType = "signup" | "resetPassword";

export type ExperimentAttendanceStatusTypeEnum =
  | "scheduled"
  | "notAttended"
  | "attended";

export type ExperimentTimeslotRead = {
  /**
   * ID
   */
  id: number;
  /**
   * Experiment start time
   */
  startTime: string;
  /**
   * Experiment end time
   */
  endTime: string;
  /**
   * Maximum number of exparticipants per session
   */
  maxParticipants: number;
};

export type ExperimentTimeslotRequest = {
  /**
   * ID
   */
  id?: number | null;
  /**
   * Experiment start time
   */
  startTime: string;
  /**
   * Experiment end time
   */
  endTime: string;
  /**
   * Maximum number of exparticipants per session
   */
  maxParticipants: number;
};

export type ExperimentTypeEnum = "online" | "offline";

export type GetExperimentParticipantResponse = {
  /**
   * Participant ID
   */
  id: number;
  /**
   * Username
   */
  username: string;
  /**
   * Experiment Date
   */
  experimentDate: string;
  /**
   * Experiment start time
   */
  startTime: string;
  /**
   * Experiment end time
   */
  endTime: string;
  /**
   * Attendance Status
   */
  attendanceStatus: ExperimentAttendanceStatusTypeEnum;
  /**
   * Created datetime
   */
  createdAt: string;
  /**
   * Updated datetime
   */
  updatedAt: string;
};

export type GetExperimentProjectResponse = {
  /**
   * ID
   */
  id: number;
  /**
   * Title
   */
  title: string;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Whether the project is public
   */
  isPublic: boolean;
  /**
   * Experiment start date
   */
  startDate: string | null;
  /**
   * Experiment end date
   */
  endDate: string | null;
  /**
   * Experimental exclusion days
   */
  excludedDates: Array<string>;
  /**
   * Time information of experiment
   */
  experimentTimeslots: Array<ExperimentTimeslotRead>;
  /**
   * Maximum number of experiment participants
   */
  maxParticipants: number;
  experimentType: ExperimentTypeEnum;
  /**
   * Experiment location
   */
  location: string | null;
  /**
   * Created datetime
   */
  createdAt: string;
  /**
   * Updated datetime
   */
  updatedAt: string;
};

export type GetProjectListResponse = {
  /**
   * ID
   */
  id: number;
  /**
   * Workspace ID
   */
  workspaceId: number;
  /**
   * Title
   */
  title: string;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Whether the project is public
   */
  isPublic: boolean;
  /**
   * Number of experiment participants
   */
  joinedParticipants: number;
  /**
   * Maximum number of exparticipants per session
   */
  maxParticipants: number;
  createdAt: string;
  updatedAt: string;
};

export type GetUserListResponse = {
  /**
   * ID
   */
  id: number;
  /**
   * Email
   */
  email: string;
  /**
   * username
   */
  username: string;
  /**
   * oauth accounts
   */
  oauthAccounts: Array<UserOauthResponse>;
};

export type GetWorkspaceListResponse = {
  /**
   * ID
   */
  id: number;
  /**
   * Title
   */
  title: string;
  /**
   * Order
   */
  orderNo: number;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type LoginRequest = {
  /**
   * Email
   */
  email: string;
  /**
   * Password
   */
  password: string;
};

export type LoginResponse = {
  /**
   * Token
   */
  token: string;
  /**
   * Refresh token
   */
  refreshToken: string;
};

export type OauthLoginRequest = {
  /**
   * Email
   */
  email: string;
  /**
   * User username
   */
  username?: string | null;
  /**
   * OAuth ID
   */
  oauthId: string;
};

export type OauthProviderTypeEnum =
  | "google"
  | "facebook"
  | "github"
  | "kakao"
  | "naver";

export type ProjectTypeEnum = "survey" | "experiment";

export type PutProjectRequest = {
  /**
   * Title
   */
  title: string;
  /**
   * Description
   */
  description?: string | null;
  /**
   * Whether the project is public
   */
  isPublic: boolean;
  startDate: string;
  /**
   * Experiment end date
   */
  endDate: string;
  /**
   * Experimental exclusion days
   */
  excludedDates: Array<string>;
  /**
   * Time information of experiment
   */
  experimentTimeslots: Array<ExperimentTimeslotRequest>;
  /**
   * Maximum number of experiment participants
   */
  maxParticipants: number;
  experimentType: ExperimentTypeEnum;
  /**
   * Experiment location
   */
  location: string;
};

export type RefreshTokenRequest = {
  /**
   * Token
   */
  token: string;
  /**
   * Refresh token
   */
  refreshToken: string;
};

export type RefreshTokenResponse = {
  /**
   * Token
   */
  token: string;
  /**
   * Refresh token
   */
  refreshToken: string;
};

export type ResetPasswordRequest = {
  /**
   * Email
   */
  email: string;
  /**
   * Password
   */
  password: string;
};

export type UpdateUserRequest = {
  /**
   * User username
   */
  username?: string | null;
  /**
   * Phone Number
   */
  phoneNum?: string | null;
};

export type UpdateWorkspaceRequest = {
  /**
   * Title
   */
  title?: string | null;
  /**
   * New order no
   */
  orderNo?: number | null;
};

export type UserOauthResponse = {
  /**
   * ID
   */
  id: number;
  /**
   * Oauth ID
   */
  oauthId: string;
  /**
   * Provider
   */
  provider: string;
};

export type ValidateEmailResponse = {
  /**
   * Email Availability
   */
  availability: boolean;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type VerifyEmailRequest = {
  /**
   * Email
   */
  email: string;
  /**
   * Code
   */
  code: string;
};

export type RefreshTokenAuthRefreshPostData = {
  requestBody: RefreshTokenRequest;
};

export type RefreshTokenAuthRefreshPostResponse = RefreshTokenResponse;

export type CheckEmailAvailabilityAuthEmailAvailabilityPostData = {
  requestBody: EmailVerificationRequest;
};

export type CheckEmailAvailabilityAuthEmailAvailabilityPostResponse =
  ValidateEmailResponse;

export type SendVerificationEmailAuthEmailVerificationsPostData = {
  requestBody: EmailVerificationRequest;
  verificationType: EmailVerificationType;
};

export type SendVerificationEmailAuthEmailVerificationsPostResponse = unknown;

export type ValidateVerificationEmailAuthEmailVerificationsValidationPostData =
  {
    requestBody: VerifyEmailRequest;
    verificationType: EmailVerificationType;
  };

export type ValidateVerificationEmailAuthEmailVerificationsValidationPostResponse =
  unknown;

export type ResetPasswordAuthResetPasswordPostData = {
  requestBody: ResetPasswordRequest;
};

export type ResetPasswordAuthResetPasswordPostResponse = unknown;

export type GetUserListUsersGetData = {
  page?: number;
  size?: number;
};

export type GetUserListUsersGetResponse = Array<GetUserListResponse>;

export type CreateUserUsersPostData = {
  requestBody: CreateUserRequest;
};

export type CreateUserUsersPostResponse = CreateUserResponse;

export type UpdateUserUsersPatchData = {
  requestBody: UpdateUserRequest;
};

export type UpdateUserUsersPatchResponse = unknown;

export type GetUserMeUsersMeGetResponse = GetUserListResponse;

export type DeleteUserUsersMeDeleteResponse = void;

export type LoginUsersLoginPostData = {
  requestBody: LoginRequest;
};

export type LoginUsersLoginPostResponse = LoginResponse;

export type LoginOauthUsersLoginOauthPostData = {
  provider: OauthProviderTypeEnum;
  requestBody: OauthLoginRequest;
};

export type LoginOauthUsersLoginOauthPostResponse = LoginResponse;

export type ChangePasswordUsersPasswordPatchData = {
  requestBody: ChangePasswordRequest;
};

export type ChangePasswordUsersPasswordPatchResponse = void;

export type GetWorkspaceListWorkspacesGetResponse =
  Array<GetWorkspaceListResponse>;

export type CreateWorkspaceWorkspacesPostData = {
  requestBody: CreateWorkspaceRequest;
};

export type CreateWorkspaceWorkspacesPostResponse = CreateWorkspaceResponse;

export type UpdateWorkspaceWorkspacesWorkspaceIdPatchData = {
  requestBody: UpdateWorkspaceRequest;
  workspaceId: number;
};

export type UpdateWorkspaceWorkspacesWorkspaceIdPatchResponse = unknown;

export type DeleteWorkspaceWorkspacesWorkspaceIdDeleteData = {
  workspaceId: number;
};

export type DeleteWorkspaceWorkspacesWorkspaceIdDeleteResponse = unknown;

export type GetProjectListWorkspacesWorkspaceIdProjectsGetData = {
  filterTitle?: string | null;
  page?: number;
  projectType: ProjectTypeEnum;
  size?: number;
  workspaceId: number;
};

export type GetProjectListWorkspacesWorkspaceIdProjectsGetResponse =
  Array<GetProjectListResponse>;

export type CreateProjectWorkspacesWorkspaceIdProjectsPostData = {
  projectType: ProjectTypeEnum;
  requestBody: CreateProjectRequest;
  workspaceId: number;
};

export type CreateProjectWorkspacesWorkspaceIdProjectsPostResponse =
  CreateProjectResponse;

export type GetProjectProjectsProjectIdGetData = {
  projectId: number;
  projectType: ProjectTypeEnum;
};

export type GetProjectProjectsProjectIdGetResponse =
  GetExperimentProjectResponse;

export type UpdateProjectProjectsProjectIdPutData = {
  projectId: number;
  projectType: ProjectTypeEnum;
  requestBody: PutProjectRequest;
};

export type UpdateProjectProjectsProjectIdPutResponse = unknown;

export type DeleteProjectProjectsProjectIdDeleteData = {
  projectId: number;
  projectType: ProjectTypeEnum;
};

export type DeleteProjectProjectsProjectIdDeleteResponse = unknown;

export type GetProjectParticipantListProjectsProjectIdParticipantsGetData = {
  page?: number;
  projectId: number;
  projectType: ProjectTypeEnum;
  size?: number;
};

export type GetProjectParticipantListProjectsProjectIdParticipantsGetResponse =
  Array<GetExperimentParticipantResponse>;

export type DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteData =
  {
    participantId: number;
    projectId: number;
    projectType: ProjectTypeEnum;
  };

export type DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteResponse =
  unknown;

export type $OpenApiTs = {
  "/auth/refresh": {
    post: {
      req: RefreshTokenAuthRefreshPostData;
      res: {
        /**
         * Successful Response
         */
        201: RefreshTokenResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/auth/email-availability": {
    post: {
      req: CheckEmailAvailabilityAuthEmailAvailabilityPostData;
      res: {
        /**
         * Successful Response
         */
        200: ValidateEmailResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/auth/email-verifications": {
    post: {
      req: SendVerificationEmailAuthEmailVerificationsPostData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/auth/email-verifications/validation": {
    post: {
      req: ValidateVerificationEmailAuthEmailVerificationsValidationPostData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/auth/reset-password": {
    post: {
      req: ResetPasswordAuthResetPasswordPostData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/users": {
    get: {
      req: GetUserListUsersGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<GetUserListResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: CreateUserUsersPostData;
      res: {
        /**
         * Successful Response
         */
        201: CreateUserResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    patch: {
      req: UpdateUserUsersPatchData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/users/me": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: GetUserListResponse;
      };
    };
    delete: {
      res: {
        /**
         * Successful Response
         */
        204: void;
      };
    };
  };
  "/users/login": {
    post: {
      req: LoginUsersLoginPostData;
      res: {
        /**
         * Successful Response
         */
        200: LoginResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/users/login/oauth": {
    post: {
      req: LoginOauthUsersLoginOauthPostData;
      res: {
        /**
         * Successful Response
         */
        200: LoginResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/users/password": {
    patch: {
      req: ChangePasswordUsersPasswordPatchData;
      res: {
        /**
         * Successful Response
         */
        204: void;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/workspaces": {
    get: {
      res: {
        /**
         * Successful Response
         */
        200: Array<GetWorkspaceListResponse>;
      };
    };
    post: {
      req: CreateWorkspaceWorkspacesPostData;
      res: {
        /**
         * Successful Response
         */
        201: CreateWorkspaceResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/workspaces/{workspaceId}": {
    patch: {
      req: UpdateWorkspaceWorkspacesWorkspaceIdPatchData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteWorkspaceWorkspacesWorkspaceIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/workspaces/{workspaceId}/projects": {
    get: {
      req: GetProjectListWorkspacesWorkspaceIdProjectsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<GetProjectListResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    post: {
      req: CreateProjectWorkspacesWorkspaceIdProjectsPostData;
      res: {
        /**
         * Successful Response
         */
        201: CreateProjectResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/projects/{projectId}": {
    get: {
      req: GetProjectProjectsProjectIdGetData;
      res: {
        /**
         * Successful Response
         */
        200: GetExperimentProjectResponse;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    put: {
      req: UpdateProjectProjectsProjectIdPutData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
    delete: {
      req: DeleteProjectProjectsProjectIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/projects/{projectId}/participants": {
    get: {
      req: GetProjectParticipantListProjectsProjectIdParticipantsGetData;
      res: {
        /**
         * Successful Response
         */
        200: Array<GetExperimentParticipantResponse>;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
  "/projects/{projectId}/participants/{participantId}": {
    delete: {
      req: DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteData;
      res: {
        /**
         * Successful Response
         */
        200: unknown;
        /**
         * Validation Error
         */
        422: HTTPValidationError;
      };
    };
  };
};
