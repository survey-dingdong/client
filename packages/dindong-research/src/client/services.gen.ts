// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as _Request } from "./core/request";
import type {
  RefreshTokenAuthRefreshPostData,
  RefreshTokenAuthRefreshPostResponse,
  CheckEmailAvailabilityAuthEmailAvailabilityPostData,
  CheckEmailAvailabilityAuthEmailAvailabilityPostResponse,
  SendVerificationEmailAuthEmailVerificationsPostData,
  SendVerificationEmailAuthEmailVerificationsPostResponse,
  ValidateVerificationEmailAuthEmailVerificationsValidationPostData,
  ValidateVerificationEmailAuthEmailVerificationsValidationPostResponse,
  ResetPasswordAuthResetPasswordPostData,
  ResetPasswordAuthResetPasswordPostResponse,
  GetUserListUsersGetData,
  GetUserListUsersGetResponse,
  CreateUserUsersPostData,
  CreateUserUsersPostResponse,
  UpdateUserUsersPatchData,
  UpdateUserUsersPatchResponse,
  GetUserMeUsersMeGetResponse,
  DeleteUserUsersMeDeleteResponse,
  LoginUsersLoginPostData,
  LoginUsersLoginPostResponse,
  LoginOauthUsersLoginOauthPostData,
  LoginOauthUsersLoginOauthPostResponse,
  ChangePasswordUsersPasswordPatchData,
  ChangePasswordUsersPasswordPatchResponse,
  GetWorkspaceListWorkspacesGetResponse,
  CreateWorkspaceWorkspacesPostData,
  CreateWorkspaceWorkspacesPostResponse,
  UpdateWorkspaceWorkspacesWorkspaceIdPatchData,
  UpdateWorkspaceWorkspacesWorkspaceIdPatchResponse,
  DeleteWorkspaceWorkspacesWorkspaceIdDeleteData,
  DeleteWorkspaceWorkspacesWorkspaceIdDeleteResponse,
  GetProjectListWorkspacesWorkspaceIdProjectsGetData,
  GetProjectListWorkspacesWorkspaceIdProjectsGetResponse,
  CreateProjectWorkspacesWorkspaceIdProjectsPostData,
  CreateProjectWorkspacesWorkspaceIdProjectsPostResponse,
  GetProjectProjectsProjectIdGetData,
  GetProjectProjectsProjectIdGetResponse,
  UpdateProjectProjectsProjectIdPutData,
  UpdateProjectProjectsProjectIdPutResponse,
  DeleteProjectProjectsProjectIdDeleteData,
  DeleteProjectProjectsProjectIdDeleteResponse,
  GetProjectParticipantListProjectsProjectIdParticipantsGetData,
  GetProjectParticipantListProjectsProjectIdParticipantsGetResponse,
  UpdateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatchData,
  UpdateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatchResponse,
  DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteData,
  DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteResponse,
} from "./types.gen";

/**
 * Refresh Token
 * @param data The data for the request.
 * @param data.requestBody
 * @returns RefreshTokenResponse Successful Response
 * @throws ApiError
 */
export const refreshTokenAuthRefreshPost = (
  data: RefreshTokenAuthRefreshPostData
): CancelablePromise<RefreshTokenAuthRefreshPostResponse> => {
  return _Request(OpenAPI, {
    method: "POST",
    url: "/auth/refresh",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Check Email Availability
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ValidateEmailResponse Successful Response
 * @throws ApiError
 */
export const checkEmailAvailabilityAuthEmailAvailabilityPost = (
  data: CheckEmailAvailabilityAuthEmailAvailabilityPostData
): CancelablePromise<CheckEmailAvailabilityAuthEmailAvailabilityPostResponse> => {
  return _Request(OpenAPI, {
    method: "POST",
    url: "/auth/email-availability",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Send Verification Email
 * @param data The data for the request.
 * @param data.verificationType
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const sendVerificationEmailAuthEmailVerificationsPost = (
  data: SendVerificationEmailAuthEmailVerificationsPostData
): CancelablePromise<SendVerificationEmailAuthEmailVerificationsPostResponse> => {
  return _Request(OpenAPI, {
    method: "POST",
    url: "/auth/email-verifications",
    query: {
      verificationType: data.verificationType,
    },
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Validate Verification Email
 * @param data The data for the request.
 * @param data.verificationType
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const validateVerificationEmailAuthEmailVerificationsValidationPost = (
  data: ValidateVerificationEmailAuthEmailVerificationsValidationPostData
): CancelablePromise<ValidateVerificationEmailAuthEmailVerificationsValidationPostResponse> => {
  return _Request(OpenAPI, {
    method: "POST",
    url: "/auth/email-verifications/validation",
    query: {
      verificationType: data.verificationType,
    },
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Reset Password
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const resetPasswordAuthResetPasswordPost = (
  data: ResetPasswordAuthResetPasswordPostData
): CancelablePromise<ResetPasswordAuthResetPasswordPostResponse> => {
  return _Request(OpenAPI, {
    method: "POST",
    url: "/auth/reset-password",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Get User List
 * @param data The data for the request.
 * @param data.page
 * @param data.size
 * @returns GetUserListResponse Successful Response
 * @throws ApiError
 */
export const getUserListUsersGet = (
  data: GetUserListUsersGetData = {}
): CancelablePromise<GetUserListUsersGetResponse> => {
  return _Request(OpenAPI, {
    method: "GET",
    url: "/users",
    query: {
      page: data.page,
      size: data.size,
    },
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Create User
 * @param data The data for the request.
 * @param data.requestBody
 * @returns CreateUserResponse Successful Response
 * @throws ApiError
 */
export const createUserUsersPost = (
  data: CreateUserUsersPostData
): CancelablePromise<CreateUserUsersPostResponse> => {
  return _Request(OpenAPI, {
    method: "POST",
    url: "/users",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Update User
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const updateUserUsersPatch = (
  data: UpdateUserUsersPatchData
): CancelablePromise<UpdateUserUsersPatchResponse> => {
  return _Request(OpenAPI, {
    method: "PATCH",
    url: "/users",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Get User Me
 * @returns GetUserListResponse Successful Response
 * @throws ApiError
 */
export const getUserMeUsersMeGet =
  (): CancelablePromise<GetUserMeUsersMeGetResponse> => {
    return _Request(OpenAPI, {
      method: "GET",
      url: "/users/me",
    });
  };

/**
 * Delete User
 * @returns void Successful Response
 * @throws ApiError
 */
export const deleteUserUsersMeDelete =
  (): CancelablePromise<DeleteUserUsersMeDeleteResponse> => {
    return _Request(OpenAPI, {
      method: "DELETE",
      url: "/users/me",
    });
  };

/**
 * Login
 * @param data The data for the request.
 * @param data.requestBody
 * @returns LoginResponse Successful Response
 * @throws ApiError
 */
export const loginUsersLoginPost = (
  data: LoginUsersLoginPostData
): CancelablePromise<LoginUsersLoginPostResponse> => {
  return _Request(OpenAPI, {
    method: "POST",
    url: "/users/login",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Login Oauth
 * @param data The data for the request.
 * @param data.provider
 * @param data.requestBody
 * @returns LoginResponse Successful Response
 * @throws ApiError
 */
export const loginOauthUsersLoginOauthPost = (
  data: LoginOauthUsersLoginOauthPostData
): CancelablePromise<LoginOauthUsersLoginOauthPostResponse> => {
  return _Request(OpenAPI, {
    method: "POST",
    url: "/users/login/oauth",
    query: {
      provider: data.provider,
    },
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Change Password
 * @param data The data for the request.
 * @param data.requestBody
 * @returns void Successful Response
 * @throws ApiError
 */
export const changePasswordUsersPasswordPatch = (
  data: ChangePasswordUsersPasswordPatchData
): CancelablePromise<ChangePasswordUsersPasswordPatchResponse> => {
  return _Request(OpenAPI, {
    method: "PATCH",
    url: "/users/password",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Get Workspace List
 * @returns GetWorkspaceListResponse Successful Response
 * @throws ApiError
 */
export const getWorkspaceListWorkspacesGet =
  (): CancelablePromise<GetWorkspaceListWorkspacesGetResponse> => {
    return _Request(OpenAPI, {
      method: "GET",
      url: "/workspaces",
    });
  };

/**
 * Create Workspace
 * @param data The data for the request.
 * @param data.requestBody
 * @returns CreateWorkspaceResponse Successful Response
 * @throws ApiError
 */
export const createWorkspaceWorkspacesPost = (
  data: CreateWorkspaceWorkspacesPostData
): CancelablePromise<CreateWorkspaceWorkspacesPostResponse> => {
  return _Request(OpenAPI, {
    method: "POST",
    url: "/workspaces",
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Update Workspace
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const updateWorkspaceWorkspacesWorkspaceIdPatch = (
  data: UpdateWorkspaceWorkspacesWorkspaceIdPatchData
): CancelablePromise<UpdateWorkspaceWorkspacesWorkspaceIdPatchResponse> => {
  return _Request(OpenAPI, {
    method: "PATCH",
    url: "/workspaces/{workspaceId}",
    path: {
      workspaceId: data.workspaceId,
    },
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Delete Workspace
 * @param data The data for the request.
 * @param data.workspaceId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const deleteWorkspaceWorkspacesWorkspaceIdDelete = (
  data: DeleteWorkspaceWorkspacesWorkspaceIdDeleteData
): CancelablePromise<DeleteWorkspaceWorkspacesWorkspaceIdDeleteResponse> => {
  return _Request(OpenAPI, {
    method: "DELETE",
    url: "/workspaces/{workspaceId}",
    path: {
      workspaceId: data.workspaceId,
    },
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Get Project List
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.projectType
 * @param data.page
 * @param data.size
 * @param data.filterTitle
 * @returns GetProjectListResponse Successful Response
 * @throws ApiError
 */
export const getProjectListWorkspacesWorkspaceIdProjectsGet = (
  data: GetProjectListWorkspacesWorkspaceIdProjectsGetData
): CancelablePromise<GetProjectListWorkspacesWorkspaceIdProjectsGetResponse> => {
  return _Request(OpenAPI, {
    method: "GET",
    url: "/workspaces/{workspaceId}/projects",
    path: {
      workspaceId: data.workspaceId,
    },
    query: {
      projectType: data.projectType,
      page: data.page,
      size: data.size,
      filterTitle: data.filterTitle,
    },
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Create Project
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.projectType
 * @param data.requestBody
 * @returns CreateProjectResponse Successful Response
 * @throws ApiError
 */
export const createProjectWorkspacesWorkspaceIdProjectsPost = (
  data: CreateProjectWorkspacesWorkspaceIdProjectsPostData
): CancelablePromise<CreateProjectWorkspacesWorkspaceIdProjectsPostResponse> => {
  return _Request(OpenAPI, {
    method: "POST",
    url: "/workspaces/{workspaceId}/projects",
    path: {
      workspaceId: data.workspaceId,
    },
    query: {
      projectType: data.projectType,
    },
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Get Project
 * @param data The data for the request.
 * @param data.projectId
 * @param data.projectType
 * @returns GetExperimentProjectResponse Successful Response
 * @throws ApiError
 */
export const getProjectProjectsProjectIdGet = (
  data: GetProjectProjectsProjectIdGetData
): CancelablePromise<GetProjectProjectsProjectIdGetResponse> => {
  return _Request(OpenAPI, {
    method: "GET",
    url: "/projects/{projectId}",
    path: {
      projectId: data.projectId,
    },
    query: {
      projectType: data.projectType,
    },
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Update Project
 * @param data The data for the request.
 * @param data.projectId
 * @param data.projectType
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const updateProjectProjectsProjectIdPut = (
  data: UpdateProjectProjectsProjectIdPutData
): CancelablePromise<UpdateProjectProjectsProjectIdPutResponse> => {
  return _Request(OpenAPI, {
    method: "PUT",
    url: "/projects/{projectId}",
    path: {
      projectId: data.projectId,
    },
    query: {
      projectType: data.projectType,
    },
    body: data.requestBody,
    mediaType: "application/json",
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Delete Project
 * @param data The data for the request.
 * @param data.projectId
 * @param data.projectType
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const deleteProjectProjectsProjectIdDelete = (
  data: DeleteProjectProjectsProjectIdDeleteData
): CancelablePromise<DeleteProjectProjectsProjectIdDeleteResponse> => {
  return _Request(OpenAPI, {
    method: "DELETE",
    url: "/projects/{projectId}",
    path: {
      projectId: data.projectId,
    },
    query: {
      projectType: data.projectType,
    },
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Get Project Participant List
 * @param data The data for the request.
 * @param data.projectId
 * @param data.projectType
 * @param data.page
 * @param data.size
 * @returns GetExperimentParticipantResponse Successful Response
 * @throws ApiError
 */
export const getProjectParticipantListProjectsProjectIdParticipantsGet = (
  data: GetProjectParticipantListProjectsProjectIdParticipantsGetData
): CancelablePromise<GetProjectParticipantListProjectsProjectIdParticipantsGetResponse> => {
  return _Request(OpenAPI, {
    method: "GET",
    url: "/projects/{projectId}/participants",
    path: {
      projectId: data.projectId,
    },
    query: {
      projectType: data.projectType,
      page: data.page,
      size: data.size,
    },
    errors: {
      422: "Validation Error",
    },
  });
};

/**
 * Update Project Participant Status
 * @param data The data for the request.
 * @param data.projectId
 * @param data.participantId
 * @param data.projectType
 * @param data.attendanceStatus
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const updateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch =
  (
    data: UpdateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatchData
  ): CancelablePromise<UpdateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatchResponse> => {
    return _Request(OpenAPI, {
      method: "PATCH",
      url: "/projects/{projectId}/participants/{participantId}",
      path: {
        projectId: data.projectId,
        participantId: data.participantId,
      },
      query: {
        projectType: data.projectType,
        attendanceStatus: data.attendanceStatus,
      },
      errors: {
        422: "Validation Error",
      },
    });
  };

/**
 * Delete Project Participant
 * @param data The data for the request.
 * @param data.projectId
 * @param data.participantId
 * @param data.projectType
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete =
  (
    data: DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteData
  ): CancelablePromise<DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteResponse> => {
    return _Request(OpenAPI, {
      method: "DELETE",
      url: "/projects/{projectId}/participants/{participantId}",
      path: {
        projectId: data.projectId,
        participantId: data.participantId,
      },
      query: {
        projectType: data.projectType,
      },
      errors: {
        422: "Validation Error",
      },
    });
  };
