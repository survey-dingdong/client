// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { RefreshTokenAuthRefreshPostData, RefreshTokenAuthRefreshPostResponse, CheckEmailAvailabilityAuthEmailAvailabilityPostData, CheckEmailAvailabilityAuthEmailAvailabilityPostResponse, SendVerificationEmailAuthEmailVerificationsPostData, SendVerificationEmailAuthEmailVerificationsPostResponse, ValidateVerificationEmailAuthEmailVerificationsValidationPostData, ValidateVerificationEmailAuthEmailVerificationsValidationPostResponse, GetUserListUsersGetData, GetUserListUsersGetResponse, CreateUserUsersPostData, CreateUserUsersPostResponse, UpdateUserUsersPatchData, UpdateUserUsersPatchResponse, GetUserMeUsersMeGetResponse, DeleteUserUsersMeDeleteResponse, LoginUsersLoginPostData, LoginUsersLoginPostResponse, ChangePasswordUsersPasswordPatchData, ChangePasswordUsersPasswordPatchResponse, GetWorkspaceListWorkspacesGetResponse, CreateWorkspaceWorkspacesPostData, CreateWorkspaceWorkspacesPostResponse, UpdateWorkspaceWorkspacesWorkspaceIdPatchData, UpdateWorkspaceWorkspacesWorkspaceIdPatchResponse, DeleteWorkspaceWorkspacesWorkspaceIdDeleteData, DeleteWorkspaceWorkspacesWorkspaceIdDeleteResponse, GetProjectListWorkspacesWorkspaceIdProjectsGetData, GetProjectListWorkspacesWorkspaceIdProjectsGetResponse, CreateProjectWorkspacesWorkspaceIdProjectsPostData, CreateProjectWorkspacesWorkspaceIdProjectsPostResponse, GetProjectProjectsProjectIdGetData, GetProjectProjectsProjectIdGetResponse, UpdateProjectProjectsProjectIdPutData, UpdateProjectProjectsProjectIdPutResponse, DeleteProjectProjectsProjectIdDeleteData, DeleteProjectProjectsProjectIdDeleteResponse, GetProjectParticipantListProjectsProjectIdParticipantsGetData, GetProjectParticipantListProjectsProjectIdParticipantsGetResponse, DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteData, DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteResponse } from './types.gen';

/**
 * Refresh Token
 * @param data The data for the request.
 * @param data.requestBody
 * @returns RefreshTokenResponse Successful Response
 * @throws ApiError
 */
export const refreshTokenAuthRefreshPost = (data: RefreshTokenAuthRefreshPostData): CancelablePromise<RefreshTokenAuthRefreshPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/auth/refresh',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Check Email Availability
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const checkEmailAvailabilityAuthEmailAvailabilityPost = (data: CheckEmailAvailabilityAuthEmailAvailabilityPostData): CancelablePromise<CheckEmailAvailabilityAuthEmailAvailabilityPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/auth/email-availability',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Send Verification Email
 * @param data The data for the request.
 * @param data.verificationType
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const sendVerificationEmailAuthEmailVerificationsPost = (data: SendVerificationEmailAuthEmailVerificationsPostData): CancelablePromise<SendVerificationEmailAuthEmailVerificationsPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/auth/email-verifications',
    query: {
        verification_type: data.verificationType
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Validate Verification Email
 * @param data The data for the request.
 * @param data.verificationType
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const validateVerificationEmailAuthEmailVerificationsValidationPost = (data: ValidateVerificationEmailAuthEmailVerificationsValidationPostData): CancelablePromise<ValidateVerificationEmailAuthEmailVerificationsValidationPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/auth/email-verifications/validation',
    query: {
        verification_type: data.verificationType
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get User List
 * @param data The data for the request.
 * @param data.page
 * @param data.size
 * @returns GetUserListResponse Successful Response
 * @throws ApiError
 */
export const getUserListUsersGet = (data: GetUserListUsersGetData = {}): CancelablePromise<GetUserListUsersGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/users',
    query: {
        page: data.page,
        size: data.size
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create User
 * @param data The data for the request.
 * @param data.requestBody
 * @returns CreateUserResponse Successful Response
 * @throws ApiError
 */
export const createUserUsersPost = (data: CreateUserUsersPostData): CancelablePromise<CreateUserUsersPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/users',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update User
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const updateUserUsersPatch = (data: UpdateUserUsersPatchData): CancelablePromise<UpdateUserUsersPatchResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/users',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get User Me
 * @returns GetUserListResponse Successful Response
 * @throws ApiError
 */
export const getUserMeUsersMeGet = (): CancelablePromise<GetUserMeUsersMeGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/users/me'
}); };

/**
 * Delete User
 * @returns void Successful Response
 * @throws ApiError
 */
export const deleteUserUsersMeDelete = (): CancelablePromise<DeleteUserUsersMeDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/users/me'
}); };

/**
 * Login
 * @param data The data for the request.
 * @param data.requestBody
 * @returns LoginResponse Successful Response
 * @throws ApiError
 */
export const loginUsersLoginPost = (data: LoginUsersLoginPostData): CancelablePromise<LoginUsersLoginPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/users/login',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Change Password
 * @param data The data for the request.
 * @param data.requestBody
 * @returns void Successful Response
 * @throws ApiError
 */
export const changePasswordUsersPasswordPatch = (data: ChangePasswordUsersPasswordPatchData): CancelablePromise<ChangePasswordUsersPasswordPatchResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/users/password',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Workspace List
 * @returns GetWorkspaceListResponse Successful Response
 * @throws ApiError
 */
export const getWorkspaceListWorkspacesGet = (): CancelablePromise<GetWorkspaceListWorkspacesGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workspaces'
}); };

/**
 * Create Workspace
 * @param data The data for the request.
 * @param data.requestBody
 * @returns CreateWorkspaceResponse Successful Response
 * @throws ApiError
 */
export const createWorkspaceWorkspacesPost = (data: CreateWorkspaceWorkspacesPostData): CancelablePromise<CreateWorkspaceWorkspacesPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workspaces',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Workspace
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const updateWorkspaceWorkspacesWorkspaceIdPatch = (data: UpdateWorkspaceWorkspacesWorkspaceIdPatchData): CancelablePromise<UpdateWorkspaceWorkspacesWorkspaceIdPatchResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/workspaces/{workspace_id}',
    path: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Workspace
 * @param data The data for the request.
 * @param data.workspaceId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const deleteWorkspaceWorkspacesWorkspaceIdDelete = (data: DeleteWorkspaceWorkspacesWorkspaceIdDeleteData): CancelablePromise<DeleteWorkspaceWorkspacesWorkspaceIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/workspaces/{workspace_id}',
    path: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Project List
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.projectType
 * @param data.page
 * @param data.size
 * @returns GetProjectListResponse Successful Response
 * @throws ApiError
 */
export const getProjectListWorkspacesWorkspaceIdProjectsGet = (data: GetProjectListWorkspacesWorkspaceIdProjectsGetData): CancelablePromise<GetProjectListWorkspacesWorkspaceIdProjectsGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workspaces/{workspace_id}/projects',
    path: {
        workspace_id: data.workspaceId
    },
    query: {
        project_type: data.projectType,
        page: data.page,
        size: data.size
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Project
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.projectType
 * @param data.requestBody
 * @returns CreateProjectResponse Successful Response
 * @throws ApiError
 */
export const createProjectWorkspacesWorkspaceIdProjectsPost = (data: CreateProjectWorkspacesWorkspaceIdProjectsPostData): CancelablePromise<CreateProjectWorkspacesWorkspaceIdProjectsPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workspaces/{workspace_id}/projects',
    path: {
        workspace_id: data.workspaceId
    },
    query: {
        project_type: data.projectType
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Project
 * @param data The data for the request.
 * @param data.projectId
 * @param data.projectType
 * @returns GetExperimentProjectResponse Successful Response
 * @throws ApiError
 */
export const getProjectProjectsProjectIdGet = (data: GetProjectProjectsProjectIdGetData): CancelablePromise<GetProjectProjectsProjectIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/projects/{project_id}',
    path: {
        project_id: data.projectId
    },
    query: {
        project_type: data.projectType
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Project
 * @param data The data for the request.
 * @param data.projectId
 * @param data.projectType
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const updateProjectProjectsProjectIdPut = (data: UpdateProjectProjectsProjectIdPutData): CancelablePromise<UpdateProjectProjectsProjectIdPutResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/projects/{project_id}',
    path: {
        project_id: data.projectId
    },
    query: {
        project_type: data.projectType
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Project
 * @param data The data for the request.
 * @param data.projectId
 * @param data.projectType
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const deleteProjectProjectsProjectIdDelete = (data: DeleteProjectProjectsProjectIdDeleteData): CancelablePromise<DeleteProjectProjectsProjectIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/projects/{project_id}',
    path: {
        project_id: data.projectId
    },
    query: {
        project_type: data.projectType
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Project Participant List
 * @param data The data for the request.
 * @param data.projectId
 * @param data.projectType
 * @param data.page
 * @param data.size
 * @returns GetExperimentParticipantResponse Successful Response
 * @throws ApiError
 */
export const getProjectParticipantListProjectsProjectIdParticipantsGet = (data: GetProjectParticipantListProjectsProjectIdParticipantsGetData): CancelablePromise<GetProjectParticipantListProjectsProjectIdParticipantsGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/projects/{project_id}/participants',
    path: {
        project_id: data.projectId
    },
    query: {
        project_type: data.projectType,
        page: data.page,
        size: data.size
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Project Participant
 * @param data The data for the request.
 * @param data.projectId
 * @param data.participantId
 * @param data.projectType
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete = (data: DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteData): CancelablePromise<DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/projects/{project_id}/participants/{participant_id}',
    path: {
        project_id: data.projectId,
        participant_id: data.participantId
    },
    query: {
        project_type: data.projectType
    },
    errors: {
        422: 'Validation Error'
    }
}); };