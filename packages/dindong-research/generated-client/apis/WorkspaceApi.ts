/* tslint:disable */
/* eslint-disable */
/**
 * Survey DingDong
 * survey-dingdong API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateWorkspaceRequest,
  CreateWorkspaceResponse,
  GetWorkspaceListResponse,
  HTTPValidationError,
  UpdateWorkspaceRequest,
} from '../models/index';
import {
    CreateWorkspaceRequestFromJSON,
    CreateWorkspaceRequestToJSON,
    CreateWorkspaceResponseFromJSON,
    CreateWorkspaceResponseToJSON,
    GetWorkspaceListResponseFromJSON,
    GetWorkspaceListResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    UpdateWorkspaceRequestFromJSON,
    UpdateWorkspaceRequestToJSON,
} from '../models/index';

export interface CreateWorkspaceWorkspacesPostRequest {
    createWorkspaceRequest: CreateWorkspaceRequest;
}

export interface DeleteWorkspaceWorkspacesWorkspaceIdDeleteRequest {
    workspaceId: number;
}

export interface UpdateWorkspaceWorkspacesWorkspaceIdPatchRequest {
    workspaceId: number;
    updateWorkspaceRequest: UpdateWorkspaceRequest;
}

/**
 * 
 */
export class WorkspaceApi extends runtime.BaseAPI {

    /**
     * Create Workspace
     */
    async createWorkspaceWorkspacesPostRaw(requestParameters: CreateWorkspaceWorkspacesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateWorkspaceResponse>> {
        if (requestParameters['createWorkspaceRequest'] == null) {
            throw new runtime.RequiredError(
                'createWorkspaceRequest',
                'Required parameter "createWorkspaceRequest" was null or undefined when calling createWorkspaceWorkspacesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PermissionDependency authentication
        }

        const response = await this.request({
            path: `/workspaces`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWorkspaceRequestToJSON(requestParameters['createWorkspaceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateWorkspaceResponseFromJSON(jsonValue));
    }

    /**
     * Create Workspace
     */
    async createWorkspaceWorkspacesPost(requestParameters: CreateWorkspaceWorkspacesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateWorkspaceResponse> {
        const response = await this.createWorkspaceWorkspacesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Workspace
     */
    async deleteWorkspaceWorkspacesWorkspaceIdDeleteRaw(requestParameters: DeleteWorkspaceWorkspacesWorkspaceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling deleteWorkspaceWorkspacesWorkspaceIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PermissionDependency authentication
        }

        const response = await this.request({
            path: `/workspaces/{workspace_id}`.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete Workspace
     */
    async deleteWorkspaceWorkspacesWorkspaceIdDelete(requestParameters: DeleteWorkspaceWorkspacesWorkspaceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteWorkspaceWorkspacesWorkspaceIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Workspace List
     */
    async getWorkspaceListWorkspacesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetWorkspaceListResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PermissionDependency authentication
        }

        const response = await this.request({
            path: `/workspaces`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetWorkspaceListResponseFromJSON));
    }

    /**
     * Get Workspace List
     */
    async getWorkspaceListWorkspacesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetWorkspaceListResponse>> {
        const response = await this.getWorkspaceListWorkspacesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update Workspace
     */
    async updateWorkspaceWorkspacesWorkspaceIdPatchRaw(requestParameters: UpdateWorkspaceWorkspacesWorkspaceIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['workspaceId'] == null) {
            throw new runtime.RequiredError(
                'workspaceId',
                'Required parameter "workspaceId" was null or undefined when calling updateWorkspaceWorkspacesWorkspaceIdPatch().'
            );
        }

        if (requestParameters['updateWorkspaceRequest'] == null) {
            throw new runtime.RequiredError(
                'updateWorkspaceRequest',
                'Required parameter "updateWorkspaceRequest" was null or undefined when calling updateWorkspaceWorkspacesWorkspaceIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PermissionDependency authentication
        }

        const response = await this.request({
            path: `/workspaces/{workspace_id}`.replace(`{${"workspace_id"}}`, encodeURIComponent(String(requestParameters['workspaceId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWorkspaceRequestToJSON(requestParameters['updateWorkspaceRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update Workspace
     */
    async updateWorkspaceWorkspacesWorkspaceIdPatch(requestParameters: UpdateWorkspaceWorkspacesWorkspaceIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateWorkspaceWorkspacesWorkspaceIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
