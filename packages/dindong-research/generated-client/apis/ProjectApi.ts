/* tslint:disable */
/* eslint-disable */
/**
 * Survey DingDong
 * survey-dingdong API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetExperimentParticipantResponse,
  GetExperimentProjectResponse,
  HTTPValidationError,
  ProjectTypeEnum,
  PutProjectRequest,
} from '../models/index';
import {
    GetExperimentParticipantResponseFromJSON,
    GetExperimentParticipantResponseToJSON,
    GetExperimentProjectResponseFromJSON,
    GetExperimentProjectResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ProjectTypeEnumFromJSON,
    ProjectTypeEnumToJSON,
    PutProjectRequestFromJSON,
    PutProjectRequestToJSON,
} from '../models/index';

export interface DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteRequest {
    projectId: number;
    participantId: number;
    projectType: ProjectTypeEnum;
}

export interface DeleteProjectProjectsProjectIdDeleteRequest {
    projectId: number;
    projectType: ProjectTypeEnum;
}

export interface GetProjectParticipantListProjectsProjectIdParticipantsGetRequest {
    projectId: number;
    projectType: ProjectTypeEnum;
    page?: number;
    size?: number;
}

export interface GetProjectProjectsProjectIdGetRequest {
    projectId: number;
    projectType: ProjectTypeEnum;
}

export interface UpdateProjectProjectsProjectIdPutRequest {
    projectId: number;
    projectType: ProjectTypeEnum;
    putProjectRequest: PutProjectRequest;
}

/**
 * 
 */
export class ProjectApi extends runtime.BaseAPI {

    /**
     * Delete Project Participant
     */
    async deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteRaw(requestParameters: DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete().'
            );
        }

        if (requestParameters['participantId'] == null) {
            throw new runtime.RequiredError(
                'participantId',
                'Required parameter "participantId" was null or undefined when calling deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete().'
            );
        }

        if (requestParameters['projectType'] == null) {
            throw new runtime.RequiredError(
                'projectType',
                'Required parameter "projectType" was null or undefined when calling deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectType'] != null) {
            queryParameters['project_type'] = requestParameters['projectType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PermissionDependency authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/participants/{participant_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))).replace(`{${"participant_id"}}`, encodeURIComponent(String(requestParameters['participantId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete Project Participant
     */
    async deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete(requestParameters: DeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Project
     */
    async deleteProjectProjectsProjectIdDeleteRaw(requestParameters: DeleteProjectProjectsProjectIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling deleteProjectProjectsProjectIdDelete().'
            );
        }

        if (requestParameters['projectType'] == null) {
            throw new runtime.RequiredError(
                'projectType',
                'Required parameter "projectType" was null or undefined when calling deleteProjectProjectsProjectIdDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectType'] != null) {
            queryParameters['project_type'] = requestParameters['projectType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PermissionDependency authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete Project
     */
    async deleteProjectProjectsProjectIdDelete(requestParameters: DeleteProjectProjectsProjectIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteProjectProjectsProjectIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Project Participant List
     */
    async getProjectParticipantListProjectsProjectIdParticipantsGetRaw(requestParameters: GetProjectParticipantListProjectsProjectIdParticipantsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetExperimentParticipantResponse>>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProjectParticipantListProjectsProjectIdParticipantsGet().'
            );
        }

        if (requestParameters['projectType'] == null) {
            throw new runtime.RequiredError(
                'projectType',
                'Required parameter "projectType" was null or undefined when calling getProjectParticipantListProjectsProjectIdParticipantsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectType'] != null) {
            queryParameters['project_type'] = requestParameters['projectType'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PermissionDependency authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}/participants`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetExperimentParticipantResponseFromJSON));
    }

    /**
     * Get Project Participant List
     */
    async getProjectParticipantListProjectsProjectIdParticipantsGet(requestParameters: GetProjectParticipantListProjectsProjectIdParticipantsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetExperimentParticipantResponse>> {
        const response = await this.getProjectParticipantListProjectsProjectIdParticipantsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Project
     */
    async getProjectProjectsProjectIdGetRaw(requestParameters: GetProjectProjectsProjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetExperimentProjectResponse>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProjectProjectsProjectIdGet().'
            );
        }

        if (requestParameters['projectType'] == null) {
            throw new runtime.RequiredError(
                'projectType',
                'Required parameter "projectType" was null or undefined when calling getProjectProjectsProjectIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectType'] != null) {
            queryParameters['project_type'] = requestParameters['projectType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PermissionDependency authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetExperimentProjectResponseFromJSON(jsonValue));
    }

    /**
     * Get Project
     */
    async getProjectProjectsProjectIdGet(requestParameters: GetProjectProjectsProjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetExperimentProjectResponse> {
        const response = await this.getProjectProjectsProjectIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Project
     */
    async updateProjectProjectsProjectIdPutRaw(requestParameters: UpdateProjectProjectsProjectIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling updateProjectProjectsProjectIdPut().'
            );
        }

        if (requestParameters['projectType'] == null) {
            throw new runtime.RequiredError(
                'projectType',
                'Required parameter "projectType" was null or undefined when calling updateProjectProjectsProjectIdPut().'
            );
        }

        if (requestParameters['putProjectRequest'] == null) {
            throw new runtime.RequiredError(
                'putProjectRequest',
                'Required parameter "putProjectRequest" was null or undefined when calling updateProjectProjectsProjectIdPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['projectType'] != null) {
            queryParameters['project_type'] = requestParameters['projectType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // PermissionDependency authentication
        }

        const response = await this.request({
            path: `/projects/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutProjectRequestToJSON(requestParameters['putProjectRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update Project
     */
    async updateProjectProjectsProjectIdPut(requestParameters: UpdateProjectProjectsProjectIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateProjectProjectsProjectIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
