/* tslint:disable */
/* eslint-disable */
/**
 * Survey DingDong
 * survey-dingdong API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEmailVerificationRequest,
  HTTPValidationError,
  RefreshTokenRequest,
  RefreshTokenResponse,
  VerifyEmailRequest,
} from '../models/index';
import {
    CreateEmailVerificationRequestFromJSON,
    CreateEmailVerificationRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    RefreshTokenRequestFromJSON,
    RefreshTokenRequestToJSON,
    RefreshTokenResponseFromJSON,
    RefreshTokenResponseToJSON,
    VerifyEmailRequestFromJSON,
    VerifyEmailRequestToJSON,
} from '../models/index';

export interface CreateEmailVerificationAuthEmailVerificationsPostRequest {
    createEmailVerificationRequest: CreateEmailVerificationRequest;
}

export interface RefreshTokenAuthRefreshPostRequest {
    refreshTokenRequest: RefreshTokenRequest;
}

export interface VerifyEmailAuthEmailVerificationsVerifyPostRequest {
    verifyEmailRequest: VerifyEmailRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Create Email Verification
     */
    async createEmailVerificationAuthEmailVerificationsPostRaw(requestParameters: CreateEmailVerificationAuthEmailVerificationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['createEmailVerificationRequest'] == null) {
            throw new runtime.RequiredError(
                'createEmailVerificationRequest',
                'Required parameter "createEmailVerificationRequest" was null or undefined when calling createEmailVerificationAuthEmailVerificationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/email-verifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEmailVerificationRequestToJSON(requestParameters['createEmailVerificationRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create Email Verification
     */
    async createEmailVerificationAuthEmailVerificationsPost(requestParameters: CreateEmailVerificationAuthEmailVerificationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createEmailVerificationAuthEmailVerificationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refresh Token
     */
    async refreshTokenAuthRefreshPostRaw(requestParameters: RefreshTokenAuthRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshTokenResponse>> {
        if (requestParameters['refreshTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'refreshTokenRequest',
                'Required parameter "refreshTokenRequest" was null or undefined when calling refreshTokenAuthRefreshPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshTokenRequestToJSON(requestParameters['refreshTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshTokenResponseFromJSON(jsonValue));
    }

    /**
     * Refresh Token
     */
    async refreshTokenAuthRefreshPost(requestParameters: RefreshTokenAuthRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshTokenResponse> {
        const response = await this.refreshTokenAuthRefreshPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify Email
     */
    async verifyEmailAuthEmailVerificationsVerifyPostRaw(requestParameters: VerifyEmailAuthEmailVerificationsVerifyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['verifyEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'verifyEmailRequest',
                'Required parameter "verifyEmailRequest" was null or undefined when calling verifyEmailAuthEmailVerificationsVerifyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/email-verifications/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyEmailRequestToJSON(requestParameters['verifyEmailRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verify Email
     */
    async verifyEmailAuthEmailVerificationsVerifyPost(requestParameters: VerifyEmailAuthEmailVerificationsVerifyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.verifyEmailAuthEmailVerificationsVerifyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
