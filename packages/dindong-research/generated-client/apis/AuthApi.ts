/* tslint:disable */
/* eslint-disable */
/**
 * Survey DingDong
 * survey-dingdong API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EmailVerificationRequest,
  EmailVerificationType,
  HTTPValidationError,
  RefreshTokenRequest,
  RefreshTokenResponse,
  VerifyEmailRequest,
} from '../models/index';
import {
    EmailVerificationRequestFromJSON,
    EmailVerificationRequestToJSON,
    EmailVerificationTypeFromJSON,
    EmailVerificationTypeToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    RefreshTokenRequestFromJSON,
    RefreshTokenRequestToJSON,
    RefreshTokenResponseFromJSON,
    RefreshTokenResponseToJSON,
    VerifyEmailRequestFromJSON,
    VerifyEmailRequestToJSON,
} from '../models/index';

export interface CheckEmailAvailabilityAuthEmailAvailabilityPostRequest {
    emailVerificationRequest: EmailVerificationRequest;
}

export interface RefreshTokenAuthRefreshPostRequest {
    refreshTokenRequest: RefreshTokenRequest;
}

export interface SendVerificationEmailAuthEmailVerificationsPostRequest {
    verificationType: EmailVerificationType;
    emailVerificationRequest: EmailVerificationRequest;
}

export interface ValidateVerificationEmailAuthEmailVerificationsValidationPostRequest {
    verificationType: EmailVerificationType;
    verifyEmailRequest: VerifyEmailRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Check Email Availability
     */
    async checkEmailAvailabilityAuthEmailAvailabilityPostRaw(requestParameters: CheckEmailAvailabilityAuthEmailAvailabilityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['emailVerificationRequest'] == null) {
            throw new runtime.RequiredError(
                'emailVerificationRequest',
                'Required parameter "emailVerificationRequest" was null or undefined when calling checkEmailAvailabilityAuthEmailAvailabilityPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/email-availability`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailVerificationRequestToJSON(requestParameters['emailVerificationRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Check Email Availability
     */
    async checkEmailAvailabilityAuthEmailAvailabilityPost(requestParameters: CheckEmailAvailabilityAuthEmailAvailabilityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.checkEmailAvailabilityAuthEmailAvailabilityPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refresh Token
     */
    async refreshTokenAuthRefreshPostRaw(requestParameters: RefreshTokenAuthRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshTokenResponse>> {
        if (requestParameters['refreshTokenRequest'] == null) {
            throw new runtime.RequiredError(
                'refreshTokenRequest',
                'Required parameter "refreshTokenRequest" was null or undefined when calling refreshTokenAuthRefreshPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshTokenRequestToJSON(requestParameters['refreshTokenRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshTokenResponseFromJSON(jsonValue));
    }

    /**
     * Refresh Token
     */
    async refreshTokenAuthRefreshPost(requestParameters: RefreshTokenAuthRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshTokenResponse> {
        const response = await this.refreshTokenAuthRefreshPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send Verification Email
     */
    async sendVerificationEmailAuthEmailVerificationsPostRaw(requestParameters: SendVerificationEmailAuthEmailVerificationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['verificationType'] == null) {
            throw new runtime.RequiredError(
                'verificationType',
                'Required parameter "verificationType" was null or undefined when calling sendVerificationEmailAuthEmailVerificationsPost().'
            );
        }

        if (requestParameters['emailVerificationRequest'] == null) {
            throw new runtime.RequiredError(
                'emailVerificationRequest',
                'Required parameter "emailVerificationRequest" was null or undefined when calling sendVerificationEmailAuthEmailVerificationsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['verificationType'] != null) {
            queryParameters['verification_type'] = requestParameters['verificationType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/email-verifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailVerificationRequestToJSON(requestParameters['emailVerificationRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Send Verification Email
     */
    async sendVerificationEmailAuthEmailVerificationsPost(requestParameters: SendVerificationEmailAuthEmailVerificationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.sendVerificationEmailAuthEmailVerificationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate Verification Email
     */
    async validateVerificationEmailAuthEmailVerificationsValidationPostRaw(requestParameters: ValidateVerificationEmailAuthEmailVerificationsValidationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['verificationType'] == null) {
            throw new runtime.RequiredError(
                'verificationType',
                'Required parameter "verificationType" was null or undefined when calling validateVerificationEmailAuthEmailVerificationsValidationPost().'
            );
        }

        if (requestParameters['verifyEmailRequest'] == null) {
            throw new runtime.RequiredError(
                'verifyEmailRequest',
                'Required parameter "verifyEmailRequest" was null or undefined when calling validateVerificationEmailAuthEmailVerificationsValidationPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['verificationType'] != null) {
            queryParameters['verification_type'] = requestParameters['verificationType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/email-verifications/validation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyEmailRequestToJSON(requestParameters['verifyEmailRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Validate Verification Email
     */
    async validateVerificationEmailAuthEmailVerificationsValidationPost(requestParameters: ValidateVerificationEmailAuthEmailVerificationsValidationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.validateVerificationEmailAuthEmailVerificationsValidationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
