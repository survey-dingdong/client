/* tslint:disable */
/* eslint-disable */
/**
 * Survey DingDong
 * survey-dingdong API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExperimentTimeslotRead } from './ExperimentTimeslotRead';
import {
    ExperimentTimeslotReadFromJSON,
    ExperimentTimeslotReadFromJSONTyped,
    ExperimentTimeslotReadToJSON,
} from './ExperimentTimeslotRead';
import type { ExperimentTypeEnum } from './ExperimentTypeEnum';
import {
    ExperimentTypeEnumFromJSON,
    ExperimentTypeEnumFromJSONTyped,
    ExperimentTypeEnumToJSON,
} from './ExperimentTypeEnum';

/**
 * 
 * @export
 * @interface GetExperimentProjectResponse
 */
export interface GetExperimentProjectResponse {
    /**
     * ID
     * @type {number}
     * @memberof GetExperimentProjectResponse
     */
    id: number;
    /**
     * Title
     * @type {string}
     * @memberof GetExperimentProjectResponse
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof GetExperimentProjectResponse
     */
    description?: string;
    /**
     * Whether the project is public
     * @type {boolean}
     * @memberof GetExperimentProjectResponse
     */
    isPublic: boolean;
    /**
     * Experiment start date
     * @type {Date}
     * @memberof GetExperimentProjectResponse
     */
    startDate: Date;
    /**
     * Experiment end date
     * @type {Date}
     * @memberof GetExperimentProjectResponse
     */
    endDate: Date;
    /**
     * Experimental exclusion days
     * @type {Array<Date>}
     * @memberof GetExperimentProjectResponse
     */
    excludedDates: Array<Date>;
    /**
     * Time information of experiment
     * @type {Array<ExperimentTimeslotRead>}
     * @memberof GetExperimentProjectResponse
     */
    experimentTimeslots: Array<ExperimentTimeslotRead>;
    /**
     * 
     * @type {ExperimentTypeEnum}
     * @memberof GetExperimentProjectResponse
     */
    experimentType: ExperimentTypeEnum;
    /**
     * Experiment location
     * @type {string}
     * @memberof GetExperimentProjectResponse
     */
    location: string;
    /**
     * Experiment participant code
     * @type {string}
     * @memberof GetExperimentProjectResponse
     */
    participantCode: string;
    /**
     * Created datetime
     * @type {Date}
     * @memberof GetExperimentProjectResponse
     */
    createdAt: Date;
    /**
     * Updated datetime
     * @type {Date}
     * @memberof GetExperimentProjectResponse
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the GetExperimentProjectResponse interface.
 */
export function instanceOfGetExperimentProjectResponse(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('title' in value)) return false;
    if (!('isPublic' in value)) return false;
    if (!('startDate' in value)) return false;
    if (!('endDate' in value)) return false;
    if (!('excludedDates' in value)) return false;
    if (!('experimentTimeslots' in value)) return false;
    if (!('experimentType' in value)) return false;
    if (!('location' in value)) return false;
    if (!('participantCode' in value)) return false;
    if (!('createdAt' in value)) return false;
    if (!('updatedAt' in value)) return false;
    return true;
}

export function GetExperimentProjectResponseFromJSON(json: any): GetExperimentProjectResponse {
    return GetExperimentProjectResponseFromJSONTyped(json, false);
}

export function GetExperimentProjectResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetExperimentProjectResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'isPublic': json['is_public'],
        'startDate': (new Date(json['start_date'])),
        'endDate': (new Date(json['end_date'])),
        'excludedDates': json['excluded_dates'],
        'experimentTimeslots': ((json['experiment_timeslots'] as Array<any>).map(ExperimentTimeslotReadFromJSON)),
        'experimentType': ExperimentTypeEnumFromJSON(json['experiment_type']),
        'location': json['location'],
        'participantCode': json['participant_code'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function GetExperimentProjectResponseToJSON(value?: GetExperimentProjectResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'title': value['title'],
        'description': value['description'],
        'is_public': value['isPublic'],
        'start_date': ((value['startDate']).toISOString().substring(0,10)),
        'end_date': ((value['endDate']).toISOString().substring(0,10)),
        'excluded_dates': value['excludedDates'],
        'experiment_timeslots': ((value['experimentTimeslots'] as Array<any>).map(ExperimentTimeslotReadToJSON)),
        'experiment_type': ExperimentTypeEnumToJSON(value['experimentType']),
        'location': value['location'],
        'participant_code': value['participantCode'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

