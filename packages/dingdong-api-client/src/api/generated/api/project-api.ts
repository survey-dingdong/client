/* tslint:disable */
/* eslint-disable */
/**
 * DingDong Survey
 * dingdong-survey API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ExperimentAttendanceStatusTypeEnum } from '../models';
// @ts-ignore
import type { GetExperimentParticipantsResponseDTO } from '../models';
// @ts-ignore
import type { GetProjectResponseDTO } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { UpdateProjectRequestDTO } from '../models';
/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Project Participant
         * @param {number} projectId 
         * @param {number} participantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete: async (projectId: number, participantId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete', 'projectId', projectId)
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete', 'participantId', participantId)
            const localVarPath = `/projects/{project_id}/participants/{participant_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"participant_id"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Project
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectProjectsProjectIdDelete: async (projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteProjectProjectsProjectIdDelete', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Project Participant List
         * @param {number} projectId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectParticipantListProjectsProjectIdParticipantsGet: async (projectId: number, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectParticipantListProjectsProjectIdParticipantsGet', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}/participants`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Project
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectsProjectIdGet: async (projectId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectProjectsProjectIdGet', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Put Project
         * @param {number} projectId 
         * @param {UpdateProjectRequestDTO} updateProjectRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectProjectsProjectIdPut: async (projectId: number, updateProjectRequestDTO: UpdateProjectRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('putProjectProjectsProjectIdPut', 'projectId', projectId)
            // verify required parameter 'updateProjectRequestDTO' is not null or undefined
            assertParamExists('putProjectProjectsProjectIdPut', 'updateProjectRequestDTO', updateProjectRequestDTO)
            const localVarPath = `/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectRequestDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Project Participant Status
         * @param {number} projectId 
         * @param {number} participantId 
         * @param {ExperimentAttendanceStatusTypeEnum} attendanceStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch: async (projectId: number, participantId: number, attendanceStatus: ExperimentAttendanceStatusTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch', 'projectId', projectId)
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('updateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch', 'participantId', participantId)
            // verify required parameter 'attendanceStatus' is not null or undefined
            assertParamExists('updateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch', 'attendanceStatus', attendanceStatus)
            const localVarPath = `/projects/{project_id}/participants/{participant_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"participant_id"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (attendanceStatus !== undefined) {
                localVarQueryParameter['attendance_status'] = attendanceStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete Project Participant
         * @param {number} projectId 
         * @param {number} participantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete(projectId: number, participantId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete(projectId, participantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Project
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectProjectsProjectIdDelete(projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectProjectsProjectIdDelete(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.deleteProjectProjectsProjectIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Project Participant List
         * @param {number} projectId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectParticipantListProjectsProjectIdParticipantsGet(projectId: number, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetExperimentParticipantsResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectParticipantListProjectsProjectIdParticipantsGet(projectId, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.getProjectParticipantListProjectsProjectIdParticipantsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Project
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectProjectsProjectIdGet(projectId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProjectResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectProjectsProjectIdGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.getProjectProjectsProjectIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Put Project
         * @param {number} projectId 
         * @param {UpdateProjectRequestDTO} updateProjectRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProjectProjectsProjectIdPut(projectId: number, updateProjectRequestDTO: UpdateProjectRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putProjectProjectsProjectIdPut(projectId, updateProjectRequestDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.putProjectProjectsProjectIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Project Participant Status
         * @param {number} projectId 
         * @param {number} participantId 
         * @param {ExperimentAttendanceStatusTypeEnum} attendanceStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch(projectId: number, participantId: number, attendanceStatus: ExperimentAttendanceStatusTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch(projectId, participantId, attendanceStatus, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectApi.updateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete Project Participant
         * @param {ProjectApiDeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete(requestParameters: ProjectApiDeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete(requestParameters.projectId, requestParameters.participantId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Project
         * @param {ProjectApiDeleteProjectProjectsProjectIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectProjectsProjectIdDelete(requestParameters: ProjectApiDeleteProjectProjectsProjectIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteProjectProjectsProjectIdDelete(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Project Participant List
         * @param {ProjectApiGetProjectParticipantListProjectsProjectIdParticipantsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectParticipantListProjectsProjectIdParticipantsGet(requestParameters: ProjectApiGetProjectParticipantListProjectsProjectIdParticipantsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetExperimentParticipantsResponseDTO>> {
            return localVarFp.getProjectParticipantListProjectsProjectIdParticipantsGet(requestParameters.projectId, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Project
         * @param {ProjectApiGetProjectProjectsProjectIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectsProjectIdGet(requestParameters: ProjectApiGetProjectProjectsProjectIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetProjectResponseDTO> {
            return localVarFp.getProjectProjectsProjectIdGet(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Put Project
         * @param {ProjectApiPutProjectProjectsProjectIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProjectProjectsProjectIdPut(requestParameters: ProjectApiPutProjectProjectsProjectIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.putProjectProjectsProjectIdPut(requestParameters.projectId, requestParameters.updateProjectRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Project Participant Status
         * @param {ProjectApiUpdateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch(requestParameters: ProjectApiUpdateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch(requestParameters.projectId, requestParameters.participantId, requestParameters.attendanceStatus, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete operation in ProjectApi.
 * @export
 * @interface ProjectApiDeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteRequest
 */
export interface ProjectApiDeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof ProjectApiDeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete
     */
    readonly projectId: number

    /**
     * 
     * @type {number}
     * @memberof ProjectApiDeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete
     */
    readonly participantId: number
}

/**
 * Request parameters for deleteProjectProjectsProjectIdDelete operation in ProjectApi.
 * @export
 * @interface ProjectApiDeleteProjectProjectsProjectIdDeleteRequest
 */
export interface ProjectApiDeleteProjectProjectsProjectIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof ProjectApiDeleteProjectProjectsProjectIdDelete
     */
    readonly projectId: number
}

/**
 * Request parameters for getProjectParticipantListProjectsProjectIdParticipantsGet operation in ProjectApi.
 * @export
 * @interface ProjectApiGetProjectParticipantListProjectsProjectIdParticipantsGetRequest
 */
export interface ProjectApiGetProjectParticipantListProjectsProjectIdParticipantsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetProjectParticipantListProjectsProjectIdParticipantsGet
     */
    readonly projectId: number

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetProjectParticipantListProjectsProjectIdParticipantsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetProjectParticipantListProjectsProjectIdParticipantsGet
     */
    readonly size?: number
}

/**
 * Request parameters for getProjectProjectsProjectIdGet operation in ProjectApi.
 * @export
 * @interface ProjectApiGetProjectProjectsProjectIdGetRequest
 */
export interface ProjectApiGetProjectProjectsProjectIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof ProjectApiGetProjectProjectsProjectIdGet
     */
    readonly projectId: number
}

/**
 * Request parameters for putProjectProjectsProjectIdPut operation in ProjectApi.
 * @export
 * @interface ProjectApiPutProjectProjectsProjectIdPutRequest
 */
export interface ProjectApiPutProjectProjectsProjectIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof ProjectApiPutProjectProjectsProjectIdPut
     */
    readonly projectId: number

    /**
     * 
     * @type {UpdateProjectRequestDTO}
     * @memberof ProjectApiPutProjectProjectsProjectIdPut
     */
    readonly updateProjectRequestDTO: UpdateProjectRequestDTO
}

/**
 * Request parameters for updateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch operation in ProjectApi.
 * @export
 * @interface ProjectApiUpdateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatchRequest
 */
export interface ProjectApiUpdateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatchRequest {
    /**
     * 
     * @type {number}
     * @memberof ProjectApiUpdateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch
     */
    readonly projectId: number

    /**
     * 
     * @type {number}
     * @memberof ProjectApiUpdateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch
     */
    readonly participantId: number

    /**
     * 
     * @type {ExperimentAttendanceStatusTypeEnum}
     * @memberof ProjectApiUpdateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch
     */
    readonly attendanceStatus: ExperimentAttendanceStatusTypeEnum
}

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * 
     * @summary Delete Project Participant
     * @param {ProjectApiDeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete(requestParameters: ProjectApiDeleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).deleteProjectParticipantProjectsProjectIdParticipantsParticipantIdDelete(requestParameters.projectId, requestParameters.participantId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Project
     * @param {ProjectApiDeleteProjectProjectsProjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public deleteProjectProjectsProjectIdDelete(requestParameters: ProjectApiDeleteProjectProjectsProjectIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).deleteProjectProjectsProjectIdDelete(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Project Participant List
     * @param {ProjectApiGetProjectParticipantListProjectsProjectIdParticipantsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectParticipantListProjectsProjectIdParticipantsGet(requestParameters: ProjectApiGetProjectParticipantListProjectsProjectIdParticipantsGetRequest, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getProjectParticipantListProjectsProjectIdParticipantsGet(requestParameters.projectId, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Project
     * @param {ProjectApiGetProjectProjectsProjectIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectProjectsProjectIdGet(requestParameters: ProjectApiGetProjectProjectsProjectIdGetRequest, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).getProjectProjectsProjectIdGet(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Put Project
     * @param {ProjectApiPutProjectProjectsProjectIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public putProjectProjectsProjectIdPut(requestParameters: ProjectApiPutProjectProjectsProjectIdPutRequest, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).putProjectProjectsProjectIdPut(requestParameters.projectId, requestParameters.updateProjectRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Project Participant Status
     * @param {ProjectApiUpdateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public updateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch(requestParameters: ProjectApiUpdateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatchRequest, options?: RawAxiosRequestConfig) {
        return ProjectApiFp(this.configuration).updateProjectParticipantStatusProjectsProjectIdParticipantsParticipantIdPatch(requestParameters.projectId, requestParameters.participantId, requestParameters.attendanceStatus, options).then((request) => request(this.axios, this.basePath));
    }
}

