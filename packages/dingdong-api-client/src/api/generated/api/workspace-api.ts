/* tslint:disable */
/* eslint-disable */
/**
 * DingDong Survey
 * dingdong-survey API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateProjectRequest } from '../models';
// @ts-ignore
import type { CreateProjectResponseDTO } from '../models';
// @ts-ignore
import type { CreateWorkspaceRequest } from '../models';
// @ts-ignore
import type { CreateWorkspaceResponseDTO } from '../models';
// @ts-ignore
import type { GetProjectListResponseDTO } from '../models';
// @ts-ignore
import type { GetWorkspaceRepsonseDTO } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { UpdateWorkspaceRequest } from '../models';
/**
 * WorkspaceApi - axios parameter creator
 * @export
 */
export const WorkspaceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Project
         * @param {number} workspaceId 
         * @param {CreateProjectRequest} createProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectWorkspacesWorkspaceIdProjectsPost: async (workspaceId: number, createProjectRequest: CreateProjectRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('createProjectWorkspacesWorkspaceIdProjectsPost', 'workspaceId', workspaceId)
            // verify required parameter 'createProjectRequest' is not null or undefined
            assertParamExists('createProjectWorkspacesWorkspaceIdProjectsPost', 'createProjectRequest', createProjectRequest)
            const localVarPath = `/workspaces/{workspace_id}/projects`
                .replace(`{${"workspace_id"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Workspace
         * @param {CreateWorkspaceRequest} createWorkspaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceWorkspacesPost: async (createWorkspaceRequest: CreateWorkspaceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createWorkspaceRequest' is not null or undefined
            assertParamExists('createWorkspaceWorkspacesPost', 'createWorkspaceRequest', createWorkspaceRequest)
            const localVarPath = `/workspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWorkspaceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Workspace
         * @param {number} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspaceWorkspacesWorkspaceIdDelete: async (workspaceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('deleteWorkspaceWorkspacesWorkspaceIdDelete', 'workspaceId', workspaceId)
            const localVarPath = `/workspaces/{workspace_id}`
                .replace(`{${"workspace_id"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Project List
         * @param {number} workspaceId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string | null} [filterTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectListWorkspacesWorkspaceIdProjectsGet: async (workspaceId: number, page?: number, size?: number, filterTitle?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('getProjectListWorkspacesWorkspaceIdProjectsGet', 'workspaceId', workspaceId)
            const localVarPath = `/workspaces/{workspace_id}/projects`
                .replace(`{${"workspace_id"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter['filter_title'] = filterTitle;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Workspace List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceListWorkspacesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Workspace
         * @param {number} workspaceId 
         * @param {UpdateWorkspaceRequest} updateWorkspaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkspaceWorkspacesWorkspaceIdPatch: async (workspaceId: number, updateWorkspaceRequest: UpdateWorkspaceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateWorkspaceWorkspacesWorkspaceIdPatch', 'workspaceId', workspaceId)
            // verify required parameter 'updateWorkspaceRequest' is not null or undefined
            assertParamExists('updateWorkspaceWorkspacesWorkspaceIdPatch', 'updateWorkspaceRequest', updateWorkspaceRequest)
            const localVarPath = `/workspaces/{workspace_id}`
                .replace(`{${"workspace_id"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWorkspaceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkspaceApi - functional programming interface
 * @export
 */
export const WorkspaceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspaceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Project
         * @param {number} workspaceId 
         * @param {CreateProjectRequest} createProjectRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectWorkspacesWorkspaceIdProjectsPost(workspaceId: number, createProjectRequest: CreateProjectRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProjectResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectWorkspacesWorkspaceIdProjectsPost(workspaceId, createProjectRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceApi.createProjectWorkspacesWorkspaceIdProjectsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Workspace
         * @param {CreateWorkspaceRequest} createWorkspaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorkspaceWorkspacesPost(createWorkspaceRequest: CreateWorkspaceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWorkspaceResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkspaceWorkspacesPost(createWorkspaceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceApi.createWorkspaceWorkspacesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Workspace
         * @param {number} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkspaceWorkspacesWorkspaceIdDelete(workspaceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkspaceWorkspacesWorkspaceIdDelete(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceApi.deleteWorkspaceWorkspacesWorkspaceIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Project List
         * @param {number} workspaceId 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string | null} [filterTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectListWorkspacesWorkspaceIdProjectsGet(workspaceId: number, page?: number, size?: number, filterTitle?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetProjectListResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectListWorkspacesWorkspaceIdProjectsGet(workspaceId, page, size, filterTitle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceApi.getProjectListWorkspacesWorkspaceIdProjectsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Workspace List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspaceListWorkspacesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetWorkspaceRepsonseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspaceListWorkspacesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceApi.getWorkspaceListWorkspacesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Workspace
         * @param {number} workspaceId 
         * @param {UpdateWorkspaceRequest} updateWorkspaceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkspaceWorkspacesWorkspaceIdPatch(workspaceId: number, updateWorkspaceRequest: UpdateWorkspaceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkspaceWorkspacesWorkspaceIdPatch(workspaceId, updateWorkspaceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkspaceApi.updateWorkspaceWorkspacesWorkspaceIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkspaceApi - factory interface
 * @export
 */
export const WorkspaceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkspaceApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Project
         * @param {WorkspaceApiCreateProjectWorkspacesWorkspaceIdProjectsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectWorkspacesWorkspaceIdProjectsPost(requestParameters: WorkspaceApiCreateProjectWorkspacesWorkspaceIdProjectsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateProjectResponseDTO> {
            return localVarFp.createProjectWorkspacesWorkspaceIdProjectsPost(requestParameters.workspaceId, requestParameters.createProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Workspace
         * @param {WorkspaceApiCreateWorkspaceWorkspacesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorkspaceWorkspacesPost(requestParameters: WorkspaceApiCreateWorkspaceWorkspacesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateWorkspaceResponseDTO> {
            return localVarFp.createWorkspaceWorkspacesPost(requestParameters.createWorkspaceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Workspace
         * @param {WorkspaceApiDeleteWorkspaceWorkspacesWorkspaceIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspaceWorkspacesWorkspaceIdDelete(requestParameters: WorkspaceApiDeleteWorkspaceWorkspacesWorkspaceIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteWorkspaceWorkspacesWorkspaceIdDelete(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Project List
         * @param {WorkspaceApiGetProjectListWorkspacesWorkspaceIdProjectsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectListWorkspacesWorkspaceIdProjectsGet(requestParameters: WorkspaceApiGetProjectListWorkspacesWorkspaceIdProjectsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetProjectListResponseDTO>> {
            return localVarFp.getProjectListWorkspacesWorkspaceIdProjectsGet(requestParameters.workspaceId, requestParameters.page, requestParameters.size, requestParameters.filterTitle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Workspace List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceListWorkspacesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<GetWorkspaceRepsonseDTO>> {
            return localVarFp.getWorkspaceListWorkspacesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Workspace
         * @param {WorkspaceApiUpdateWorkspaceWorkspacesWorkspaceIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkspaceWorkspacesWorkspaceIdPatch(requestParameters: WorkspaceApiUpdateWorkspaceWorkspacesWorkspaceIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updateWorkspaceWorkspacesWorkspaceIdPatch(requestParameters.workspaceId, requestParameters.updateWorkspaceRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProjectWorkspacesWorkspaceIdProjectsPost operation in WorkspaceApi.
 * @export
 * @interface WorkspaceApiCreateProjectWorkspacesWorkspaceIdProjectsPostRequest
 */
export interface WorkspaceApiCreateProjectWorkspacesWorkspaceIdProjectsPostRequest {
    /**
     * 
     * @type {number}
     * @memberof WorkspaceApiCreateProjectWorkspacesWorkspaceIdProjectsPost
     */
    readonly workspaceId: number

    /**
     * 
     * @type {CreateProjectRequest}
     * @memberof WorkspaceApiCreateProjectWorkspacesWorkspaceIdProjectsPost
     */
    readonly createProjectRequest: CreateProjectRequest
}

/**
 * Request parameters for createWorkspaceWorkspacesPost operation in WorkspaceApi.
 * @export
 * @interface WorkspaceApiCreateWorkspaceWorkspacesPostRequest
 */
export interface WorkspaceApiCreateWorkspaceWorkspacesPostRequest {
    /**
     * 
     * @type {CreateWorkspaceRequest}
     * @memberof WorkspaceApiCreateWorkspaceWorkspacesPost
     */
    readonly createWorkspaceRequest: CreateWorkspaceRequest
}

/**
 * Request parameters for deleteWorkspaceWorkspacesWorkspaceIdDelete operation in WorkspaceApi.
 * @export
 * @interface WorkspaceApiDeleteWorkspaceWorkspacesWorkspaceIdDeleteRequest
 */
export interface WorkspaceApiDeleteWorkspaceWorkspacesWorkspaceIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof WorkspaceApiDeleteWorkspaceWorkspacesWorkspaceIdDelete
     */
    readonly workspaceId: number
}

/**
 * Request parameters for getProjectListWorkspacesWorkspaceIdProjectsGet operation in WorkspaceApi.
 * @export
 * @interface WorkspaceApiGetProjectListWorkspacesWorkspaceIdProjectsGetRequest
 */
export interface WorkspaceApiGetProjectListWorkspacesWorkspaceIdProjectsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof WorkspaceApiGetProjectListWorkspacesWorkspaceIdProjectsGet
     */
    readonly workspaceId: number

    /**
     * 
     * @type {number}
     * @memberof WorkspaceApiGetProjectListWorkspacesWorkspaceIdProjectsGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof WorkspaceApiGetProjectListWorkspacesWorkspaceIdProjectsGet
     */
    readonly size?: number

    /**
     * 
     * @type {string}
     * @memberof WorkspaceApiGetProjectListWorkspacesWorkspaceIdProjectsGet
     */
    readonly filterTitle?: string | null
}

/**
 * Request parameters for updateWorkspaceWorkspacesWorkspaceIdPatch operation in WorkspaceApi.
 * @export
 * @interface WorkspaceApiUpdateWorkspaceWorkspacesWorkspaceIdPatchRequest
 */
export interface WorkspaceApiUpdateWorkspaceWorkspacesWorkspaceIdPatchRequest {
    /**
     * 
     * @type {number}
     * @memberof WorkspaceApiUpdateWorkspaceWorkspacesWorkspaceIdPatch
     */
    readonly workspaceId: number

    /**
     * 
     * @type {UpdateWorkspaceRequest}
     * @memberof WorkspaceApiUpdateWorkspaceWorkspacesWorkspaceIdPatch
     */
    readonly updateWorkspaceRequest: UpdateWorkspaceRequest
}

/**
 * WorkspaceApi - object-oriented interface
 * @export
 * @class WorkspaceApi
 * @extends {BaseAPI}
 */
export class WorkspaceApi extends BaseAPI {
    /**
     * 
     * @summary Create Project
     * @param {WorkspaceApiCreateProjectWorkspacesWorkspaceIdProjectsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public createProjectWorkspacesWorkspaceIdProjectsPost(requestParameters: WorkspaceApiCreateProjectWorkspacesWorkspaceIdProjectsPostRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).createProjectWorkspacesWorkspaceIdProjectsPost(requestParameters.workspaceId, requestParameters.createProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Workspace
     * @param {WorkspaceApiCreateWorkspaceWorkspacesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public createWorkspaceWorkspacesPost(requestParameters: WorkspaceApiCreateWorkspaceWorkspacesPostRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).createWorkspaceWorkspacesPost(requestParameters.createWorkspaceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Workspace
     * @param {WorkspaceApiDeleteWorkspaceWorkspacesWorkspaceIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public deleteWorkspaceWorkspacesWorkspaceIdDelete(requestParameters: WorkspaceApiDeleteWorkspaceWorkspacesWorkspaceIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).deleteWorkspaceWorkspacesWorkspaceIdDelete(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Project List
     * @param {WorkspaceApiGetProjectListWorkspacesWorkspaceIdProjectsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public getProjectListWorkspacesWorkspaceIdProjectsGet(requestParameters: WorkspaceApiGetProjectListWorkspacesWorkspaceIdProjectsGetRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).getProjectListWorkspacesWorkspaceIdProjectsGet(requestParameters.workspaceId, requestParameters.page, requestParameters.size, requestParameters.filterTitle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Workspace List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public getWorkspaceListWorkspacesGet(options?: RawAxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).getWorkspaceListWorkspacesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Workspace
     * @param {WorkspaceApiUpdateWorkspaceWorkspacesWorkspaceIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateWorkspaceWorkspacesWorkspaceIdPatch(requestParameters: WorkspaceApiUpdateWorkspaceWorkspacesWorkspaceIdPatchRequest, options?: RawAxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateWorkspaceWorkspacesWorkspaceIdPatch(requestParameters.workspaceId, requestParameters.updateWorkspaceRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

