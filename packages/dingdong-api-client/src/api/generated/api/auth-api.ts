/* tslint:disable */
/* eslint-disable */
/**
 * DingDong Survey
 * dingdong-survey API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { EmailVerificationRequest } from '../models';
// @ts-ignore
import type { EmailVerificationType } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { RefreshTokenRequest } from '../models';
// @ts-ignore
import type { RefreshTokenResponseDTO } from '../models';
// @ts-ignore
import type { ResetPasswordRequest } from '../models';
// @ts-ignore
import type { ValidateEmailResponseDTO } from '../models';
// @ts-ignore
import type { VerifyEmailRequest } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check Email Availability
         * @param {EmailVerificationRequest} emailVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEmailAvailabilityAuthEmailAvailabilityPost: async (emailVerificationRequest: EmailVerificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailVerificationRequest' is not null or undefined
            assertParamExists('checkEmailAvailabilityAuthEmailAvailabilityPost', 'emailVerificationRequest', emailVerificationRequest)
            const localVarPath = `/auth/email-availability`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailVerificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshTokenAuthRefreshPost: async (refreshTokenRequest: RefreshTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshTokenRequest' is not null or undefined
            assertParamExists('refreshTokenAuthRefreshPost', 'refreshTokenRequest', refreshTokenRequest)
            const localVarPath = `/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset Password
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordAuthResetPasswordPost: async (resetPasswordRequest: ResetPasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordRequest' is not null or undefined
            assertParamExists('resetPasswordAuthResetPasswordPost', 'resetPasswordRequest', resetPasswordRequest)
            const localVarPath = `/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send Verification Email
         * @param {EmailVerificationType} verificationType 
         * @param {EmailVerificationRequest} emailVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVerificationEmailAuthEmailVerificationsPost: async (verificationType: EmailVerificationType, emailVerificationRequest: EmailVerificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verificationType' is not null or undefined
            assertParamExists('sendVerificationEmailAuthEmailVerificationsPost', 'verificationType', verificationType)
            // verify required parameter 'emailVerificationRequest' is not null or undefined
            assertParamExists('sendVerificationEmailAuthEmailVerificationsPost', 'emailVerificationRequest', emailVerificationRequest)
            const localVarPath = `/auth/email-verifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (verificationType !== undefined) {
                localVarQueryParameter['verification_type'] = verificationType;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailVerificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validate Verification Email
         * @param {EmailVerificationType} verificationType 
         * @param {VerifyEmailRequest} verifyEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateVerificationEmailAuthEmailVerificationsValidationPost: async (verificationType: EmailVerificationType, verifyEmailRequest: VerifyEmailRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verificationType' is not null or undefined
            assertParamExists('validateVerificationEmailAuthEmailVerificationsValidationPost', 'verificationType', verificationType)
            // verify required parameter 'verifyEmailRequest' is not null or undefined
            assertParamExists('validateVerificationEmailAuthEmailVerificationsValidationPost', 'verifyEmailRequest', verifyEmailRequest)
            const localVarPath = `/auth/email-verifications/validation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (verificationType !== undefined) {
                localVarQueryParameter['verification_type'] = verificationType;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check Email Availability
         * @param {EmailVerificationRequest} emailVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkEmailAvailabilityAuthEmailAvailabilityPost(emailVerificationRequest: EmailVerificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateEmailResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkEmailAvailabilityAuthEmailAvailabilityPost(emailVerificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.checkEmailAvailabilityAuthEmailAvailabilityPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshTokenRequest} refreshTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshTokenAuthRefreshPost(refreshTokenRequest: RefreshTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RefreshTokenResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshTokenAuthRefreshPost(refreshTokenRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.refreshTokenAuthRefreshPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reset Password
         * @param {ResetPasswordRequest} resetPasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordAuthResetPasswordPost(resetPasswordRequest: ResetPasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordAuthResetPasswordPost(resetPasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.resetPasswordAuthResetPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Send Verification Email
         * @param {EmailVerificationType} verificationType 
         * @param {EmailVerificationRequest} emailVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendVerificationEmailAuthEmailVerificationsPost(verificationType: EmailVerificationType, emailVerificationRequest: EmailVerificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendVerificationEmailAuthEmailVerificationsPost(verificationType, emailVerificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.sendVerificationEmailAuthEmailVerificationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Validate Verification Email
         * @param {EmailVerificationType} verificationType 
         * @param {VerifyEmailRequest} verifyEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateVerificationEmailAuthEmailVerificationsValidationPost(verificationType: EmailVerificationType, verifyEmailRequest: VerifyEmailRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateVerificationEmailAuthEmailVerificationsValidationPost(verificationType, verifyEmailRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.validateVerificationEmailAuthEmailVerificationsValidationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Check Email Availability
         * @param {AuthApiCheckEmailAvailabilityAuthEmailAvailabilityPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEmailAvailabilityAuthEmailAvailabilityPost(requestParameters: AuthApiCheckEmailAvailabilityAuthEmailAvailabilityPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidateEmailResponseDTO> {
            return localVarFp.checkEmailAvailabilityAuthEmailAvailabilityPost(requestParameters.emailVerificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh Token
         * @param {AuthApiRefreshTokenAuthRefreshPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshTokenAuthRefreshPost(requestParameters: AuthApiRefreshTokenAuthRefreshPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<RefreshTokenResponseDTO> {
            return localVarFp.refreshTokenAuthRefreshPost(requestParameters.refreshTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset Password
         * @param {AuthApiResetPasswordAuthResetPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordAuthResetPasswordPost(requestParameters: AuthApiResetPasswordAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.resetPasswordAuthResetPasswordPost(requestParameters.resetPasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send Verification Email
         * @param {AuthApiSendVerificationEmailAuthEmailVerificationsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendVerificationEmailAuthEmailVerificationsPost(requestParameters: AuthApiSendVerificationEmailAuthEmailVerificationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.sendVerificationEmailAuthEmailVerificationsPost(requestParameters.verificationType, requestParameters.emailVerificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validate Verification Email
         * @param {AuthApiValidateVerificationEmailAuthEmailVerificationsValidationPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateVerificationEmailAuthEmailVerificationsValidationPost(requestParameters: AuthApiValidateVerificationEmailAuthEmailVerificationsValidationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.validateVerificationEmailAuthEmailVerificationsValidationPost(requestParameters.verificationType, requestParameters.verifyEmailRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkEmailAvailabilityAuthEmailAvailabilityPost operation in AuthApi.
 * @export
 * @interface AuthApiCheckEmailAvailabilityAuthEmailAvailabilityPostRequest
 */
export interface AuthApiCheckEmailAvailabilityAuthEmailAvailabilityPostRequest {
    /**
     * 
     * @type {EmailVerificationRequest}
     * @memberof AuthApiCheckEmailAvailabilityAuthEmailAvailabilityPost
     */
    readonly emailVerificationRequest: EmailVerificationRequest
}

/**
 * Request parameters for refreshTokenAuthRefreshPost operation in AuthApi.
 * @export
 * @interface AuthApiRefreshTokenAuthRefreshPostRequest
 */
export interface AuthApiRefreshTokenAuthRefreshPostRequest {
    /**
     * 
     * @type {RefreshTokenRequest}
     * @memberof AuthApiRefreshTokenAuthRefreshPost
     */
    readonly refreshTokenRequest: RefreshTokenRequest
}

/**
 * Request parameters for resetPasswordAuthResetPasswordPost operation in AuthApi.
 * @export
 * @interface AuthApiResetPasswordAuthResetPasswordPostRequest
 */
export interface AuthApiResetPasswordAuthResetPasswordPostRequest {
    /**
     * 
     * @type {ResetPasswordRequest}
     * @memberof AuthApiResetPasswordAuthResetPasswordPost
     */
    readonly resetPasswordRequest: ResetPasswordRequest
}

/**
 * Request parameters for sendVerificationEmailAuthEmailVerificationsPost operation in AuthApi.
 * @export
 * @interface AuthApiSendVerificationEmailAuthEmailVerificationsPostRequest
 */
export interface AuthApiSendVerificationEmailAuthEmailVerificationsPostRequest {
    /**
     * 
     * @type {EmailVerificationType}
     * @memberof AuthApiSendVerificationEmailAuthEmailVerificationsPost
     */
    readonly verificationType: EmailVerificationType

    /**
     * 
     * @type {EmailVerificationRequest}
     * @memberof AuthApiSendVerificationEmailAuthEmailVerificationsPost
     */
    readonly emailVerificationRequest: EmailVerificationRequest
}

/**
 * Request parameters for validateVerificationEmailAuthEmailVerificationsValidationPost operation in AuthApi.
 * @export
 * @interface AuthApiValidateVerificationEmailAuthEmailVerificationsValidationPostRequest
 */
export interface AuthApiValidateVerificationEmailAuthEmailVerificationsValidationPostRequest {
    /**
     * 
     * @type {EmailVerificationType}
     * @memberof AuthApiValidateVerificationEmailAuthEmailVerificationsValidationPost
     */
    readonly verificationType: EmailVerificationType

    /**
     * 
     * @type {VerifyEmailRequest}
     * @memberof AuthApiValidateVerificationEmailAuthEmailVerificationsValidationPost
     */
    readonly verifyEmailRequest: VerifyEmailRequest
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Check Email Availability
     * @param {AuthApiCheckEmailAvailabilityAuthEmailAvailabilityPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public checkEmailAvailabilityAuthEmailAvailabilityPost(requestParameters: AuthApiCheckEmailAvailabilityAuthEmailAvailabilityPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).checkEmailAvailabilityAuthEmailAvailabilityPost(requestParameters.emailVerificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh Token
     * @param {AuthApiRefreshTokenAuthRefreshPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshTokenAuthRefreshPost(requestParameters: AuthApiRefreshTokenAuthRefreshPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).refreshTokenAuthRefreshPost(requestParameters.refreshTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset Password
     * @param {AuthApiResetPasswordAuthResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public resetPasswordAuthResetPasswordPost(requestParameters: AuthApiResetPasswordAuthResetPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).resetPasswordAuthResetPasswordPost(requestParameters.resetPasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send Verification Email
     * @param {AuthApiSendVerificationEmailAuthEmailVerificationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public sendVerificationEmailAuthEmailVerificationsPost(requestParameters: AuthApiSendVerificationEmailAuthEmailVerificationsPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).sendVerificationEmailAuthEmailVerificationsPost(requestParameters.verificationType, requestParameters.emailVerificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validate Verification Email
     * @param {AuthApiValidateVerificationEmailAuthEmailVerificationsValidationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public validateVerificationEmailAuthEmailVerificationsValidationPost(requestParameters: AuthApiValidateVerificationEmailAuthEmailVerificationsValidationPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).validateVerificationEmailAuthEmailVerificationsValidationPost(requestParameters.verificationType, requestParameters.verifyEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

