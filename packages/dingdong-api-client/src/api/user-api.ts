/* tslint:disable */
/* eslint-disable */
/**
 * DingDong Survey
 * dingdong-survey API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ChangePasswordRequest } from '../models';
// @ts-ignore
import type { CreateUserRequest } from '../models';
// @ts-ignore
import type { CreateUserResponseDTO } from '../models';
// @ts-ignore
import type { GetUserListResponseDTO } from '../models';
// @ts-ignore
import type { GetUserResponseDTO } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { LoginRequest } from '../models';
// @ts-ignore
import type { LoginResponseDTO } from '../models';
// @ts-ignore
import type { OauthLoginRequest } from '../models';
// @ts-ignore
import type { OauthProviderTypeEnum } from '../models';
// @ts-ignore
import type { UpdateUserRequest } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Change Password
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordUsersPasswordPatch: async (changePasswordRequest: ChangePasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordRequest' is not null or undefined
            assertParamExists('changePasswordUsersPasswordPatch', 'changePasswordRequest', changePasswordRequest)
            const localVarPath = `/users/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create User
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsersPost: async (createUserRequest: CreateUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserRequest' is not null or undefined
            assertParamExists('createUserUsersPost', 'createUserRequest', createUserRequest)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsersMeDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User List
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserListUsersGet: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMeUsersMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login Oauth
         * @param {OauthProviderTypeEnum} provider 
         * @param {OauthLoginRequest} oauthLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOauthUsersLoginOauthPost: async (provider: OauthProviderTypeEnum, oauthLoginRequest: OauthLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('loginOauthUsersLoginOauthPost', 'provider', provider)
            // verify required parameter 'oauthLoginRequest' is not null or undefined
            assertParamExists('loginOauthUsersLoginOauthPost', 'oauthLoginRequest', oauthLoginRequest)
            const localVarPath = `/users/login/oauth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oauthLoginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsersLoginPost: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('loginUsersLoginPost', 'loginRequest', loginRequest)
            const localVarPath = `/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update User
         * @param {UpdateUserRequest} updateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsersPatch: async (updateUserRequest: UpdateUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserRequest' is not null or undefined
            assertParamExists('updateUserUsersPatch', 'updateUserRequest', updateUserRequest)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PermissionDependency required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Change Password
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePasswordUsersPasswordPatch(changePasswordRequest: ChangePasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePasswordUsersPasswordPatch(changePasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.changePasswordUsersPasswordPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create User
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUsersPost(createUserRequest: CreateUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserUsersPost(createUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.createUserUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserUsersMeDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserUsersMeDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.deleteUserUsersMeDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get User List
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserListUsersGet(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetUserListResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserListUsersGet(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserListUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get User Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserMeUsersMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserMeUsersMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserMeUsersMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login Oauth
         * @param {OauthProviderTypeEnum} provider 
         * @param {OauthLoginRequest} oauthLoginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginOauthUsersLoginOauthPost(provider: OauthProviderTypeEnum, oauthLoginRequest: OauthLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginOauthUsersLoginOauthPost(provider, oauthLoginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.loginOauthUsersLoginOauthPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUsersLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUsersLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.loginUsersLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update User
         * @param {UpdateUserRequest} updateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserUsersPatch(updateUserRequest: UpdateUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserUsersPatch(updateUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.updateUserUsersPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Change Password
         * @param {UserApiChangePasswordUsersPasswordPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordUsersPasswordPatch(requestParameters: UserApiChangePasswordUsersPasswordPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changePasswordUsersPasswordPatch(requestParameters.changePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create User
         * @param {UserApiCreateUserUsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsersPost(requestParameters: UserApiCreateUserUsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateUserResponseDTO> {
            return localVarFp.createUserUsersPost(requestParameters.createUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsersMeDelete(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUserUsersMeDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User List
         * @param {UserApiGetUserListUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserListUsersGet(requestParameters: UserApiGetUserListUsersGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetUserListResponseDTO>> {
            return localVarFp.getUserListUsersGet(requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMeUsersMeGet(options?: RawAxiosRequestConfig): AxiosPromise<GetUserResponseDTO> {
            return localVarFp.getUserMeUsersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login Oauth
         * @param {UserApiLoginOauthUsersLoginOauthPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOauthUsersLoginOauthPost(requestParameters: UserApiLoginOauthUsersLoginOauthPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponseDTO> {
            return localVarFp.loginOauthUsersLoginOauthPost(requestParameters.provider, requestParameters.oauthLoginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {UserApiLoginUsersLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUsersLoginPost(requestParameters: UserApiLoginUsersLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponseDTO> {
            return localVarFp.loginUsersLoginPost(requestParameters.loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update User
         * @param {UserApiUpdateUserUsersPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsersPatch(requestParameters: UserApiUpdateUserUsersPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.updateUserUsersPatch(requestParameters.updateUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for changePasswordUsersPasswordPatch operation in UserApi.
 * @export
 * @interface UserApiChangePasswordUsersPasswordPatchRequest
 */
export interface UserApiChangePasswordUsersPasswordPatchRequest {
    /**
     * 
     * @type {ChangePasswordRequest}
     * @memberof UserApiChangePasswordUsersPasswordPatch
     */
    readonly changePasswordRequest: ChangePasswordRequest
}

/**
 * Request parameters for createUserUsersPost operation in UserApi.
 * @export
 * @interface UserApiCreateUserUsersPostRequest
 */
export interface UserApiCreateUserUsersPostRequest {
    /**
     * 
     * @type {CreateUserRequest}
     * @memberof UserApiCreateUserUsersPost
     */
    readonly createUserRequest: CreateUserRequest
}

/**
 * Request parameters for getUserListUsersGet operation in UserApi.
 * @export
 * @interface UserApiGetUserListUsersGetRequest
 */
export interface UserApiGetUserListUsersGetRequest {
    /**
     * 
     * @type {number}
     * @memberof UserApiGetUserListUsersGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UserApiGetUserListUsersGet
     */
    readonly size?: number
}

/**
 * Request parameters for loginOauthUsersLoginOauthPost operation in UserApi.
 * @export
 * @interface UserApiLoginOauthUsersLoginOauthPostRequest
 */
export interface UserApiLoginOauthUsersLoginOauthPostRequest {
    /**
     * 
     * @type {OauthProviderTypeEnum}
     * @memberof UserApiLoginOauthUsersLoginOauthPost
     */
    readonly provider: OauthProviderTypeEnum

    /**
     * 
     * @type {OauthLoginRequest}
     * @memberof UserApiLoginOauthUsersLoginOauthPost
     */
    readonly oauthLoginRequest: OauthLoginRequest
}

/**
 * Request parameters for loginUsersLoginPost operation in UserApi.
 * @export
 * @interface UserApiLoginUsersLoginPostRequest
 */
export interface UserApiLoginUsersLoginPostRequest {
    /**
     * 
     * @type {LoginRequest}
     * @memberof UserApiLoginUsersLoginPost
     */
    readonly loginRequest: LoginRequest
}

/**
 * Request parameters for updateUserUsersPatch operation in UserApi.
 * @export
 * @interface UserApiUpdateUserUsersPatchRequest
 */
export interface UserApiUpdateUserUsersPatchRequest {
    /**
     * 
     * @type {UpdateUserRequest}
     * @memberof UserApiUpdateUserUsersPatch
     */
    readonly updateUserRequest: UpdateUserRequest
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Change Password
     * @param {UserApiChangePasswordUsersPasswordPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public changePasswordUsersPasswordPatch(requestParameters: UserApiChangePasswordUsersPasswordPatchRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).changePasswordUsersPasswordPatch(requestParameters.changePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create User
     * @param {UserApiCreateUserUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUserUsersPost(requestParameters: UserApiCreateUserUsersPostRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).createUserUsersPost(requestParameters.createUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUserUsersMeDelete(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).deleteUserUsersMeDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User List
     * @param {UserApiGetUserListUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserListUsersGet(requestParameters: UserApiGetUserListUsersGetRequest = {}, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserListUsersGet(requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserMeUsersMeGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserMeUsersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login Oauth
     * @param {UserApiLoginOauthUsersLoginOauthPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public loginOauthUsersLoginOauthPost(requestParameters: UserApiLoginOauthUsersLoginOauthPostRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).loginOauthUsersLoginOauthPost(requestParameters.provider, requestParameters.oauthLoginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {UserApiLoginUsersLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public loginUsersLoginPost(requestParameters: UserApiLoginUsersLoginPostRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).loginUsersLoginPost(requestParameters.loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update User
     * @param {UserApiUpdateUserUsersPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserUsersPatch(requestParameters: UserApiUpdateUserUsersPatchRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUserUsersPatch(requestParameters.updateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

